ARM GAS  /tmp/ccZPmZxG.s 			page 1


   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"menu.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Core/Src/menu.c"
  18              		.section	.text.serveMenuFunc,"ax",%progbits
  19              		.align	1
  20              		.global	serveMenuFunc
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  25              	serveMenuFunc:
  26              	.LVL0:
  27              	.LFB67:
   1:Core/Src/menu.c **** #include "menu.h"
   2:Core/Src/menu.c **** 
   3:Core/Src/menu.c **** char menu_titles[MENUS_NUM][100];
   4:Core/Src/menu.c **** char menu_cont[MENUS_NUM][100];
   5:Core/Src/menu.c **** 
   6:Core/Src/menu.c **** uint8_t initMenu(struct menu_status *menu_h){
   7:Core/Src/menu.c ****   ST7735_Init();
   8:Core/Src/menu.c ****   menu_h->curr_screen = Home_screen;
   9:Core/Src/menu.c ****   menu_h->update_needed = true;
  10:Core/Src/menu.c ****   menu_h->alarm_count = 0;
  11:Core/Src/menu.c **** 
  12:Core/Src/menu.c ****   setMenuTexts(menu_titles[Home_screen],"Plotter ON");
  13:Core/Src/menu.c ****   setMenuTexts(menu_titles[Manual_move],"Init. man move");
  14:Core/Src/menu.c ****   setMenuTexts(menu_titles[Zero_pos],"Set Zero Pos.");
  15:Core/Src/menu.c ****   setMenuTexts(menu_titles[Grid_setup_auto],"Auto. Setup");
  16:Core/Src/menu.c ****   setMenuTexts(menu_titles[Grid_setup_manual],"Man. Setup");
  17:Core/Src/menu.c ****   setMenuTexts(menu_titles[Grid_setup_zero],"Set (0,0)-pos");
  18:Core/Src/menu.c ****   setMenuTexts(menu_titles[Grid_setup_move],"Set next-pos");
  19:Core/Src/menu.c ****   setMenuTexts(menu_titles[Success_screen],"SUCCESS!");
  20:Core/Src/menu.c ****   setMenuTexts(menu_titles[Fail_screen],"FAILED!");
  21:Core/Src/menu.c ****   setMenuTexts(menu_titles[Next_batch],"Run Next?");
  22:Core/Src/menu.c ****   setMenuTexts(menu_titles[MENUS_NUM],"NEVER REACHED");
  23:Core/Src/menu.c **** 
  24:Core/Src/menu.c ****   setMenuTexts(menu_cont[Home_screen],"");
  25:Core/Src/menu.c ****   setMenuTexts(menu_cont[Manual_move],"Manually move plotter using joypad");
  26:Core/Src/menu.c ****   setMenuTexts(menu_cont[Zero_pos],"Set current possition as origin (0,0)");
  27:Core/Src/menu.c ****   setMenuTexts(menu_cont[Grid_setup_auto],"Automatically setup the flash pin positions");
  28:Core/Src/menu.c ****   setMenuTexts(menu_cont[Grid_setup_manual],"Manually setup the flash pin positions");
  29:Core/Src/menu.c ****   setMenuTexts(menu_cont[Grid_setup_zero],"Set start position");
  30:Core/Src/menu.c ****   setMenuTexts(menu_cont[Grid_setup_move],"Set next position");
  31:Core/Src/menu.c ****   setMenuTexts(menu_cont[Success_screen],"");
ARM GAS  /tmp/ccZPmZxG.s 			page 2


  32:Core/Src/menu.c ****   setMenuTexts(menu_cont[Fail_screen],"");
  33:Core/Src/menu.c ****   setMenuTexts(menu_cont[Next_batch],"Press SELECT when next batch loaded.\nPress CANCEL to stop fl
  34:Core/Src/menu.c **** 
  35:Core/Src/menu.c ****   return RETURN_OK;
  36:Core/Src/menu.c **** }
  37:Core/Src/menu.c **** 
  38:Core/Src/menu.c **** uint8_t serveMenuScreen(struct menu_status *menu_h, uint8_t *joy_vals){
  39:Core/Src/menu.c ****   if(menu_h->update_needed == true){
  40:Core/Src/menu.c ****     drawMenuScreen(menu_h->curr_screen);
  41:Core/Src/menu.c ****     menu_h->update_needed = false;
  42:Core/Src/menu.c ****   }
  43:Core/Src/menu.c ****   
  44:Core/Src/menu.c ****   //make sure that home screen gets displayed for 1s then change to next screen
  45:Core/Src/menu.c ****   if(menu_h->curr_screen == Home_screen){
  46:Core/Src/menu.c ****     HAL_Delay(1000);
  47:Core/Src/menu.c ****     menu_h->curr_screen = Manual_move;
  48:Core/Src/menu.c ****     menu_h->update_needed = true;
  49:Core/Src/menu.c ****   }
  50:Core/Src/menu.c **** 
  51:Core/Src/menu.c ****   //joypad to the right so switch to next screen
  52:Core/Src/menu.c ****   else if(joy_vals[1] > 220){
  53:Core/Src/menu.c ****     if(menu_h->curr_screen < MENUS_NUM)menu_h->curr_screen = (menu_h->curr_screen + 1);
  54:Core/Src/menu.c ****     else menu_h->curr_screen = Manual_move;
  55:Core/Src/menu.c ****     menu_h->update_needed = true;
  56:Core/Src/menu.c ****   } 
  57:Core/Src/menu.c **** 
  58:Core/Src/menu.c ****   //joypad to the left so switch to previous screen
  59:Core/Src/menu.c ****   else if(joy_vals[1] < 30){
  60:Core/Src/menu.c ****     if(menu_h->curr_screen > Manual_move)menu_h->curr_screen = (menu_h->curr_screen - 1);
  61:Core/Src/menu.c ****     else menu_h->curr_screen = Grid_setup_manual;
  62:Core/Src/menu.c ****     menu_h->update_needed = true;
  63:Core/Src/menu.c ****   } 
  64:Core/Src/menu.c **** 
  65:Core/Src/menu.c ****   else;
  66:Core/Src/menu.c **** 
  67:Core/Src/menu.c **** 
  68:Core/Src/menu.c **** 
  69:Core/Src/menu.c ****   return RETURN_OK;
  70:Core/Src/menu.c **** }
  71:Core/Src/menu.c **** 
  72:Core/Src/menu.c **** uint8_t serveMenuFunc(struct menu_status *menu_h, uint8_t *joy_vals, struct setup_data *setup_data_
  28              		.loc 1 72 102 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  73:Core/Src/menu.c **** 
  74:Core/Src/menu.c ****   return RETURN_OK;
  33              		.loc 1 74 3 view .LVU1
  75:Core/Src/menu.c **** }
  34              		.loc 1 75 1 is_stmt 0 view .LVU2
  35 0000 0020     		movs	r0, #0
  36              	.LVL1:
  37              		.loc 1 75 1 view .LVU3
  38 0002 7047     		bx	lr
  39              		.cfi_endproc
  40              	.LFE67:
ARM GAS  /tmp/ccZPmZxG.s 			page 3


  42              		.section	.text.drawMenuScreen,"ax",%progbits
  43              		.align	1
  44              		.global	drawMenuScreen
  45              		.syntax unified
  46              		.thumb
  47              		.thumb_func
  49              	drawMenuScreen:
  50              	.LVL2:
  51              	.LFB68:
  76:Core/Src/menu.c **** 
  77:Core/Src/menu.c **** uint8_t drawMenuScreen(enum screens req_screen){
  52              		.loc 1 77 48 is_stmt 1 view -0
  53              		.cfi_startproc
  54              		@ args = 0, pretend = 0, frame = 0
  55              		@ frame_needed = 0, uses_anonymous_args = 0
  56              		.loc 1 77 48 is_stmt 0 view .LVU5
  57 0000 70B5     		push	{r4, r5, r6, lr}
  58              		.cfi_def_cfa_offset 16
  59              		.cfi_offset 4, -16
  60              		.cfi_offset 5, -12
  61              		.cfi_offset 6, -8
  62              		.cfi_offset 14, -4
  63 0002 84B0     		sub	sp, sp, #16
  64              		.cfi_def_cfa_offset 32
  65 0004 0446     		mov	r4, r0
  78:Core/Src/menu.c ****   //grey background
  79:Core/Src/menu.c ****   ST7735_FillScreen(ST7735_GRAY);
  66              		.loc 1 79 3 is_stmt 1 view .LVU6
  67 0006 4AF21450 		movw	r0, #42260
  68              	.LVL3:
  69              		.loc 1 79 3 is_stmt 0 view .LVU7
  70 000a FFF7FEFF 		bl	ST7735_FillScreen
  71              	.LVL4:
  80:Core/Src/menu.c ****   ST7735_WriteJustifyString(10, menu_titles[req_screen], Font_11x18, ST7735_RED,ST7735_GRAY,JUST_CE
  72              		.loc 1 80 3 is_stmt 1 view .LVU8
  73              		.loc 1 80 44 is_stmt 0 view .LVU9
  74 000e 6423     		movs	r3, #100
  75 0010 03FB04F4 		mul	r4, r3, r4
  76              		.loc 1 80 3 view .LVU10
  77 0014 0E4B     		ldr	r3, .L4
  78 0016 0222     		movs	r2, #2
  79 0018 0292     		str	r2, [sp, #8]
  80 001a 4AF21456 		movw	r6, #42260
  81 001e 0196     		str	r6, [sp, #4]
  82 0020 4FF47842 		mov	r2, #63488
  83 0024 0092     		str	r2, [sp]
  84 0026 0CCB     		ldm	r3, {r2, r3}
  85 0028 0A49     		ldr	r1, .L4+4
  86 002a 2144     		add	r1, r1, r4
  87 002c 0A20     		movs	r0, #10
  88 002e FFF7FEFF 		bl	ST7735_WriteJustifyString
  89              	.LVL5:
  81:Core/Src/menu.c ****   ST7735_WriteJustifyString(50, menu_cont[req_screen], Font_7x10, ST7735_BLUE,ST7735_GRAY,JUST_LEFT
  90              		.loc 1 81 3 is_stmt 1 view .LVU11
  91 0032 094B     		ldr	r3, .L4+8
  92 0034 0025     		movs	r5, #0
  93 0036 0295     		str	r5, [sp, #8]
ARM GAS  /tmp/ccZPmZxG.s 			page 4


  94 0038 0196     		str	r6, [sp, #4]
  95 003a 1F22     		movs	r2, #31
  96 003c 0092     		str	r2, [sp]
  97 003e 0CCB     		ldm	r3, {r2, r3}
  98 0040 0649     		ldr	r1, .L4+12
  99 0042 2144     		add	r1, r1, r4
 100 0044 3220     		movs	r0, #50
 101 0046 FFF7FEFF 		bl	ST7735_WriteJustifyString
 102              	.LVL6:
  82:Core/Src/menu.c **** 
  83:Core/Src/menu.c ****   return RETURN_OK;
 103              		.loc 1 83 3 view .LVU12
  84:Core/Src/menu.c **** }
 104              		.loc 1 84 1 is_stmt 0 view .LVU13
 105 004a 2846     		mov	r0, r5
 106 004c 04B0     		add	sp, sp, #16
 107              		.cfi_def_cfa_offset 16
 108              		@ sp needed
 109 004e 70BD     		pop	{r4, r5, r6, pc}
 110              	.L5:
 111              		.align	2
 112              	.L4:
 113 0050 00000000 		.word	Font_11x18
 114 0054 00000000 		.word	menu_titles
 115 0058 00000000 		.word	Font_7x10
 116 005c 00000000 		.word	menu_cont
 117              		.cfi_endproc
 118              	.LFE68:
 120              		.section	.text.serveMenuScreen,"ax",%progbits
 121              		.align	1
 122              		.global	serveMenuScreen
 123              		.syntax unified
 124              		.thumb
 125              		.thumb_func
 127              	serveMenuScreen:
 128              	.LVL7:
 129              	.LFB66:
  38:Core/Src/menu.c ****   if(menu_h->update_needed == true){
 130              		.loc 1 38 71 is_stmt 1 view -0
 131              		.cfi_startproc
 132              		@ args = 0, pretend = 0, frame = 0
 133              		@ frame_needed = 0, uses_anonymous_args = 0
  38:Core/Src/menu.c ****   if(menu_h->update_needed == true){
 134              		.loc 1 38 71 is_stmt 0 view .LVU15
 135 0000 38B5     		push	{r3, r4, r5, lr}
 136              		.cfi_def_cfa_offset 16
 137              		.cfi_offset 3, -16
 138              		.cfi_offset 4, -12
 139              		.cfi_offset 5, -8
 140              		.cfi_offset 14, -4
 141 0002 0446     		mov	r4, r0
 142 0004 0D46     		mov	r5, r1
  39:Core/Src/menu.c ****     drawMenuScreen(menu_h->curr_screen);
 143              		.loc 1 39 3 is_stmt 1 view .LVU16
  39:Core/Src/menu.c ****     drawMenuScreen(menu_h->curr_screen);
 144              		.loc 1 39 12 is_stmt 0 view .LVU17
 145 0006 4378     		ldrb	r3, [r0, #1]	@ zero_extendqisi2
ARM GAS  /tmp/ccZPmZxG.s 			page 5


  39:Core/Src/menu.c ****     drawMenuScreen(menu_h->curr_screen);
 146              		.loc 1 39 5 view .LVU18
 147 0008 012B     		cmp	r3, #1
 148 000a 0DD0     		beq	.L16
 149              	.LVL8:
 150              	.L7:
  45:Core/Src/menu.c ****     HAL_Delay(1000);
 151              		.loc 1 45 3 is_stmt 1 view .LVU19
  45:Core/Src/menu.c ****     HAL_Delay(1000);
 152              		.loc 1 45 12 is_stmt 0 view .LVU20
 153 000c 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
  45:Core/Src/menu.c ****     HAL_Delay(1000);
 154              		.loc 1 45 5 view .LVU21
 155 000e 012B     		cmp	r3, #1
 156 0010 10D0     		beq	.L17
  52:Core/Src/menu.c ****     if(menu_h->curr_screen < MENUS_NUM)menu_h->curr_screen = (menu_h->curr_screen + 1);
 157              		.loc 1 52 8 is_stmt 1 view .LVU22
  52:Core/Src/menu.c ****     if(menu_h->curr_screen < MENUS_NUM)menu_h->curr_screen = (menu_h->curr_screen + 1);
 158              		.loc 1 52 19 is_stmt 0 view .LVU23
 159 0012 6A78     		ldrb	r2, [r5, #1]	@ zero_extendqisi2
  52:Core/Src/menu.c ****     if(menu_h->curr_screen < MENUS_NUM)menu_h->curr_screen = (menu_h->curr_screen + 1);
 160              		.loc 1 52 10 view .LVU24
 161 0014 DC2A     		cmp	r2, #220
 162 0016 19D9     		bls	.L10
  53:Core/Src/menu.c ****     else menu_h->curr_screen = Manual_move;
 163              		.loc 1 53 5 is_stmt 1 view .LVU25
  53:Core/Src/menu.c ****     else menu_h->curr_screen = Manual_move;
 164              		.loc 1 53 7 is_stmt 0 view .LVU26
 165 0018 0A2B     		cmp	r3, #10
 166 001a 14D8     		bhi	.L11
  53:Core/Src/menu.c ****     else menu_h->curr_screen = Manual_move;
 167              		.loc 1 53 40 is_stmt 1 discriminator 1 view .LVU27
  53:Core/Src/menu.c ****     else menu_h->curr_screen = Manual_move;
 168              		.loc 1 53 83 is_stmt 0 discriminator 1 view .LVU28
 169 001c 0133     		adds	r3, r3, #1
  53:Core/Src/menu.c ****     else menu_h->curr_screen = Manual_move;
 170              		.loc 1 53 60 discriminator 1 view .LVU29
 171 001e 2370     		strb	r3, [r4]
 172              	.L12:
  55:Core/Src/menu.c ****   } 
 173              		.loc 1 55 5 is_stmt 1 view .LVU30
  55:Core/Src/menu.c ****   } 
 174              		.loc 1 55 27 is_stmt 0 view .LVU31
 175 0020 0123     		movs	r3, #1
 176 0022 6370     		strb	r3, [r4, #1]
 177              	.L9:
  69:Core/Src/menu.c **** }
 178              		.loc 1 69 3 is_stmt 1 view .LVU32
  70:Core/Src/menu.c **** 
 179              		.loc 1 70 1 is_stmt 0 view .LVU33
 180 0024 0020     		movs	r0, #0
 181 0026 38BD     		pop	{r3, r4, r5, pc}
 182              	.LVL9:
 183              	.L16:
  40:Core/Src/menu.c ****     menu_h->update_needed = false;
 184              		.loc 1 40 5 is_stmt 1 view .LVU34
 185 0028 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
ARM GAS  /tmp/ccZPmZxG.s 			page 6


 186              	.LVL10:
  40:Core/Src/menu.c ****     menu_h->update_needed = false;
 187              		.loc 1 40 5 is_stmt 0 view .LVU35
 188 002a FFF7FEFF 		bl	drawMenuScreen
 189              	.LVL11:
  41:Core/Src/menu.c ****   }
 190              		.loc 1 41 5 is_stmt 1 view .LVU36
  41:Core/Src/menu.c ****   }
 191              		.loc 1 41 27 is_stmt 0 view .LVU37
 192 002e 0023     		movs	r3, #0
 193 0030 6370     		strb	r3, [r4, #1]
 194 0032 EBE7     		b	.L7
 195              	.L17:
  46:Core/Src/menu.c ****     menu_h->curr_screen = Manual_move;
 196              		.loc 1 46 5 is_stmt 1 view .LVU38
 197 0034 4FF47A70 		mov	r0, #1000
 198 0038 FFF7FEFF 		bl	HAL_Delay
 199              	.LVL12:
  47:Core/Src/menu.c ****     menu_h->update_needed = true;
 200              		.loc 1 47 5 view .LVU39
  47:Core/Src/menu.c ****     menu_h->update_needed = true;
 201              		.loc 1 47 25 is_stmt 0 view .LVU40
 202 003c 0223     		movs	r3, #2
 203 003e 2370     		strb	r3, [r4]
  48:Core/Src/menu.c ****   }
 204              		.loc 1 48 5 is_stmt 1 view .LVU41
  48:Core/Src/menu.c ****   }
 205              		.loc 1 48 27 is_stmt 0 view .LVU42
 206 0040 0123     		movs	r3, #1
 207 0042 6370     		strb	r3, [r4, #1]
 208 0044 EEE7     		b	.L9
 209              	.L11:
  54:Core/Src/menu.c ****     menu_h->update_needed = true;
 210              		.loc 1 54 10 is_stmt 1 view .LVU43
  54:Core/Src/menu.c ****     menu_h->update_needed = true;
 211              		.loc 1 54 30 is_stmt 0 view .LVU44
 212 0046 0223     		movs	r3, #2
 213 0048 2370     		strb	r3, [r4]
 214 004a E9E7     		b	.L12
 215              	.L10:
  59:Core/Src/menu.c ****     if(menu_h->curr_screen > Manual_move)menu_h->curr_screen = (menu_h->curr_screen - 1);
 216              		.loc 1 59 8 is_stmt 1 view .LVU45
  59:Core/Src/menu.c ****     if(menu_h->curr_screen > Manual_move)menu_h->curr_screen = (menu_h->curr_screen - 1);
 217              		.loc 1 59 10 is_stmt 0 view .LVU46
 218 004c 1D2A     		cmp	r2, #29
 219 004e E9D8     		bhi	.L9
  60:Core/Src/menu.c ****     else menu_h->curr_screen = Grid_setup_manual;
 220              		.loc 1 60 5 is_stmt 1 view .LVU47
  60:Core/Src/menu.c ****     else menu_h->curr_screen = Grid_setup_manual;
 221              		.loc 1 60 7 is_stmt 0 view .LVU48
 222 0050 022B     		cmp	r3, #2
 223 0052 04D9     		bls	.L13
  60:Core/Src/menu.c ****     else menu_h->curr_screen = Grid_setup_manual;
 224              		.loc 1 60 42 is_stmt 1 discriminator 1 view .LVU49
  60:Core/Src/menu.c ****     else menu_h->curr_screen = Grid_setup_manual;
 225              		.loc 1 60 85 is_stmt 0 discriminator 1 view .LVU50
 226 0054 013B     		subs	r3, r3, #1
ARM GAS  /tmp/ccZPmZxG.s 			page 7


  60:Core/Src/menu.c ****     else menu_h->curr_screen = Grid_setup_manual;
 227              		.loc 1 60 62 discriminator 1 view .LVU51
 228 0056 2370     		strb	r3, [r4]
 229              	.L14:
  62:Core/Src/menu.c ****   } 
 230              		.loc 1 62 5 is_stmt 1 view .LVU52
  62:Core/Src/menu.c ****   } 
 231              		.loc 1 62 27 is_stmt 0 view .LVU53
 232 0058 0123     		movs	r3, #1
 233 005a 6370     		strb	r3, [r4, #1]
 234 005c E2E7     		b	.L9
 235              	.L13:
  61:Core/Src/menu.c ****     menu_h->update_needed = true;
 236              		.loc 1 61 10 is_stmt 1 view .LVU54
  61:Core/Src/menu.c ****     menu_h->update_needed = true;
 237              		.loc 1 61 30 is_stmt 0 view .LVU55
 238 005e 0523     		movs	r3, #5
 239 0060 2370     		strb	r3, [r4]
 240 0062 F9E7     		b	.L14
 241              		.cfi_endproc
 242              	.LFE66:
 244              		.section	.text.setMenuTexts,"ax",%progbits
 245              		.align	1
 246              		.global	setMenuTexts
 247              		.syntax unified
 248              		.thumb
 249              		.thumb_func
 251              	setMenuTexts:
 252              	.LVL13:
 253              	.LFB69:
  85:Core/Src/menu.c **** 
  86:Core/Src/menu.c **** 
  87:Core/Src/menu.c **** uint8_t setMenuTexts(char *dest, const char *cont){
 254              		.loc 1 87 51 is_stmt 1 view -0
 255              		.cfi_startproc
 256              		@ args = 0, pretend = 0, frame = 0
 257              		@ frame_needed = 0, uses_anonymous_args = 0
 258              		.loc 1 87 51 is_stmt 0 view .LVU57
 259 0000 38B5     		push	{r3, r4, r5, lr}
 260              		.cfi_def_cfa_offset 16
 261              		.cfi_offset 3, -16
 262              		.cfi_offset 4, -12
 263              		.cfi_offset 5, -8
 264              		.cfi_offset 14, -4
 265 0002 0546     		mov	r5, r0
 266 0004 0C46     		mov	r4, r1
  88:Core/Src/menu.c ****   uint8_t cont_size = strlen(cont)+1;
 267              		.loc 1 88 3 is_stmt 1 view .LVU58
 268              		.loc 1 88 23 is_stmt 0 view .LVU59
 269 0006 0846     		mov	r0, r1
 270              	.LVL14:
 271              		.loc 1 88 23 view .LVU60
 272 0008 FFF7FEFF 		bl	strlen
 273              	.LVL15:
 274              		.loc 1 88 35 view .LVU61
 275 000c C2B2     		uxtb	r2, r0
 276              		.loc 1 88 11 view .LVU62
ARM GAS  /tmp/ccZPmZxG.s 			page 8


 277 000e 0132     		adds	r2, r2, #1
 278              	.LVL16:
  89:Core/Src/menu.c ****   strncpy(dest,cont,cont_size);
 279              		.loc 1 89 3 is_stmt 1 view .LVU63
 280 0010 D2B2     		uxtb	r2, r2
 281              		.loc 1 89 3 is_stmt 0 view .LVU64
 282 0012 2146     		mov	r1, r4
 283 0014 2846     		mov	r0, r5
 284 0016 FFF7FEFF 		bl	strncpy
 285              	.LVL17:
  90:Core/Src/menu.c ****   return RETURN_OK;
 286              		.loc 1 90 3 is_stmt 1 view .LVU65
  91:Core/Src/menu.c **** }
 287              		.loc 1 91 1 is_stmt 0 view .LVU66
 288 001a 0020     		movs	r0, #0
 289 001c 38BD     		pop	{r3, r4, r5, pc}
 290              		.loc 1 91 1 view .LVU67
 291              		.cfi_endproc
 292              	.LFE69:
 294              		.section	.rodata.initMenu.str1.4,"aMS",%progbits,1
 295              		.align	2
 296              	.LC0:
 297 0000 506C6F74 		.ascii	"Plotter ON\000"
 297      74657220 
 297      4F4E00
 298 000b 00       		.align	2
 299              	.LC1:
 300 000c 496E6974 		.ascii	"Init. man move\000"
 300      2E206D61 
 300      6E206D6F 
 300      766500
 301 001b 00       		.align	2
 302              	.LC2:
 303 001c 53657420 		.ascii	"Set Zero Pos.\000"
 303      5A65726F 
 303      20506F73 
 303      2E00
 304 002a 0000     		.align	2
 305              	.LC3:
 306 002c 4175746F 		.ascii	"Auto. Setup\000"
 306      2E205365 
 306      74757000 
 307              		.align	2
 308              	.LC4:
 309 0038 4D616E2E 		.ascii	"Man. Setup\000"
 309      20536574 
 309      757000
 310 0043 00       		.align	2
 311              	.LC5:
 312 0044 53657420 		.ascii	"Set (0,0)-pos\000"
 312      28302C30 
 312      292D706F 
 312      7300
 313 0052 0000     		.align	2
 314              	.LC6:
 315 0054 53657420 		.ascii	"Set next-pos\000"
 315      6E657874 
ARM GAS  /tmp/ccZPmZxG.s 			page 9


 315      2D706F73 
 315      00
 316 0061 000000   		.align	2
 317              	.LC7:
 318 0064 53554343 		.ascii	"SUCCESS!\000"
 318      45535321 
 318      00
 319 006d 000000   		.align	2
 320              	.LC8:
 321 0070 4641494C 		.ascii	"FAILED!\000"
 321      45442100 
 322              		.align	2
 323              	.LC9:
 324 0078 52756E20 		.ascii	"Run Next?\000"
 324      4E657874 
 324      3F00
 325 0082 0000     		.align	2
 326              	.LC10:
 327 0084 4E455645 		.ascii	"NEVER REACHED\000"
 327      52205245 
 327      41434845 
 327      4400
 328 0092 0000     		.align	2
 329              	.LC11:
 330 0094 00       		.ascii	"\000"
 331 0095 000000   		.align	2
 332              	.LC12:
 333 0098 4D616E75 		.ascii	"Manually move plotter using joypad\000"
 333      616C6C79 
 333      206D6F76 
 333      6520706C 
 333      6F747465 
 334 00bb 00       		.align	2
 335              	.LC13:
 336 00bc 53657420 		.ascii	"Set current possition as origin (0,0)\000"
 336      63757272 
 336      656E7420 
 336      706F7373 
 336      6974696F 
 337 00e2 0000     		.align	2
 338              	.LC14:
 339 00e4 4175746F 		.ascii	"Automatically setup the flash pin positions\000"
 339      6D617469 
 339      63616C6C 
 339      79207365 
 339      74757020 
 340              		.align	2
 341              	.LC15:
 342 0110 4D616E75 		.ascii	"Manually setup the flash pin positions\000"
 342      616C6C79 
 342      20736574 
 342      75702074 
 342      68652066 
 343 0137 00       		.align	2
 344              	.LC16:
 345 0138 53657420 		.ascii	"Set start position\000"
 345      73746172 
ARM GAS  /tmp/ccZPmZxG.s 			page 10


 345      7420706F 
 345      73697469 
 345      6F6E00
 346 014b 00       		.align	2
 347              	.LC17:
 348 014c 53657420 		.ascii	"Set next position\000"
 348      6E657874 
 348      20706F73 
 348      6974696F 
 348      6E00
 349 015e 0000     		.align	2
 350              	.LC18:
 351 0160 50726573 		.ascii	"Press SELECT when next batch loaded.\012Press CANCE"
 351      73205345 
 351      4C454354 
 351      20776865 
 351      6E206E65 
 352 0190 4C20746F 		.ascii	"L to stop flashing.\000"
 352      2073746F 
 352      7020666C 
 352      61736869 
 352      6E672E00 
 353              		.section	.text.initMenu,"ax",%progbits
 354              		.align	1
 355              		.global	initMenu
 356              		.syntax unified
 357              		.thumb
 358              		.thumb_func
 360              	initMenu:
 361              	.LVL18:
 362              	.LFB65:
   6:Core/Src/menu.c ****   ST7735_Init();
 363              		.loc 1 6 45 is_stmt 1 view -0
 364              		.cfi_startproc
 365              		@ args = 0, pretend = 0, frame = 0
 366              		@ frame_needed = 0, uses_anonymous_args = 0
   6:Core/Src/menu.c ****   ST7735_Init();
 367              		.loc 1 6 45 is_stmt 0 view .LVU69
 368 0000 70B5     		push	{r4, r5, r6, lr}
 369              		.cfi_def_cfa_offset 16
 370              		.cfi_offset 4, -16
 371              		.cfi_offset 5, -12
 372              		.cfi_offset 6, -8
 373              		.cfi_offset 14, -4
 374 0002 0446     		mov	r4, r0
   7:Core/Src/menu.c ****   menu_h->curr_screen = Home_screen;
 375              		.loc 1 7 3 is_stmt 1 view .LVU70
 376 0004 FFF7FEFF 		bl	ST7735_Init
 377              	.LVL19:
   8:Core/Src/menu.c ****   menu_h->update_needed = true;
 378              		.loc 1 8 3 view .LVU71
   8:Core/Src/menu.c ****   menu_h->update_needed = true;
 379              		.loc 1 8 23 is_stmt 0 view .LVU72
 380 0008 0123     		movs	r3, #1
 381 000a 2370     		strb	r3, [r4]
   9:Core/Src/menu.c ****   menu_h->alarm_count = 0;
 382              		.loc 1 9 3 is_stmt 1 view .LVU73
ARM GAS  /tmp/ccZPmZxG.s 			page 11


   9:Core/Src/menu.c ****   menu_h->alarm_count = 0;
 383              		.loc 1 9 25 is_stmt 0 view .LVU74
 384 000c 6370     		strb	r3, [r4, #1]
  10:Core/Src/menu.c **** 
 385              		.loc 1 10 3 is_stmt 1 view .LVU75
  10:Core/Src/menu.c **** 
 386              		.loc 1 10 23 is_stmt 0 view .LVU76
 387 000e 0026     		movs	r6, #0
 388 0010 A670     		strb	r6, [r4, #2]
  12:Core/Src/menu.c ****   setMenuTexts(menu_titles[Manual_move],"Init. man move");
 389              		.loc 1 12 3 is_stmt 1 view .LVU77
 390 0012 364C     		ldr	r4, .L22
 391              	.LVL20:
  12:Core/Src/menu.c ****   setMenuTexts(menu_titles[Manual_move],"Init. man move");
 392              		.loc 1 12 3 is_stmt 0 view .LVU78
 393 0014 3649     		ldr	r1, .L22+4
 394 0016 2046     		mov	r0, r4
 395 0018 FFF7FEFF 		bl	setMenuTexts
 396              	.LVL21:
  13:Core/Src/menu.c ****   setMenuTexts(menu_titles[Zero_pos],"Set Zero Pos.");
 397              		.loc 1 13 3 is_stmt 1 view .LVU79
 398 001c 3549     		ldr	r1, .L22+8
 399 001e 04F16400 		add	r0, r4, #100
 400 0022 FFF7FEFF 		bl	setMenuTexts
 401              	.LVL22:
  14:Core/Src/menu.c ****   setMenuTexts(menu_titles[Grid_setup_auto],"Auto. Setup");
 402              		.loc 1 14 3 view .LVU80
 403 0026 3449     		ldr	r1, .L22+12
 404 0028 04F1C800 		add	r0, r4, #200
 405 002c FFF7FEFF 		bl	setMenuTexts
 406              	.LVL23:
  15:Core/Src/menu.c ****   setMenuTexts(menu_titles[Grid_setup_manual],"Man. Setup");
 407              		.loc 1 15 3 view .LVU81
 408 0030 3249     		ldr	r1, .L22+16
 409 0032 04F59670 		add	r0, r4, #300
 410 0036 FFF7FEFF 		bl	setMenuTexts
 411              	.LVL24:
  16:Core/Src/menu.c ****   setMenuTexts(menu_titles[Grid_setup_zero],"Set (0,0)-pos");
 412              		.loc 1 16 3 view .LVU82
 413 003a 3149     		ldr	r1, .L22+20
 414 003c 04F5C870 		add	r0, r4, #400
 415 0040 FFF7FEFF 		bl	setMenuTexts
 416              	.LVL25:
  17:Core/Src/menu.c ****   setMenuTexts(menu_titles[Grid_setup_move],"Set next-pos");
 417              		.loc 1 17 3 view .LVU83
 418 0044 2F49     		ldr	r1, .L22+24
 419 0046 04F5FA70 		add	r0, r4, #500
 420 004a FFF7FEFF 		bl	setMenuTexts
 421              	.LVL26:
  18:Core/Src/menu.c ****   setMenuTexts(menu_titles[Success_screen],"SUCCESS!");
 422              		.loc 1 18 3 view .LVU84
 423 004e 2E49     		ldr	r1, .L22+28
 424 0050 04F51670 		add	r0, r4, #600
 425 0054 FFF7FEFF 		bl	setMenuTexts
 426              	.LVL27:
  19:Core/Src/menu.c ****   setMenuTexts(menu_titles[Fail_screen],"FAILED!");
 427              		.loc 1 19 3 view .LVU85
ARM GAS  /tmp/ccZPmZxG.s 			page 12


 428 0058 2C49     		ldr	r1, .L22+32
 429 005a 04F52F70 		add	r0, r4, #700
 430 005e FFF7FEFF 		bl	setMenuTexts
 431              	.LVL28:
  20:Core/Src/menu.c ****   setMenuTexts(menu_titles[Next_batch],"Run Next?");
 432              		.loc 1 20 3 view .LVU86
 433 0062 2B49     		ldr	r1, .L22+36
 434 0064 04F54870 		add	r0, r4, #800
 435 0068 FFF7FEFF 		bl	setMenuTexts
 436              	.LVL29:
  21:Core/Src/menu.c ****   setMenuTexts(menu_titles[MENUS_NUM],"NEVER REACHED");
 437              		.loc 1 21 3 view .LVU87
 438 006c 2949     		ldr	r1, .L22+40
 439 006e 04F56170 		add	r0, r4, #900
 440 0072 FFF7FEFF 		bl	setMenuTexts
 441              	.LVL30:
  22:Core/Src/menu.c **** 
 442              		.loc 1 22 3 view .LVU88
 443 0076 2849     		ldr	r1, .L22+44
 444 0078 04F57A70 		add	r0, r4, #1000
 445 007c FFF7FEFF 		bl	setMenuTexts
 446              	.LVL31:
  24:Core/Src/menu.c ****   setMenuTexts(menu_cont[Manual_move],"Manually move plotter using joypad");
 447              		.loc 1 24 3 view .LVU89
 448 0080 264D     		ldr	r5, .L22+48
 449 0082 274C     		ldr	r4, .L22+52
 450 0084 2946     		mov	r1, r5
 451 0086 2046     		mov	r0, r4
 452 0088 FFF7FEFF 		bl	setMenuTexts
 453              	.LVL32:
  25:Core/Src/menu.c ****   setMenuTexts(menu_cont[Zero_pos],"Set current possition as origin (0,0)");
 454              		.loc 1 25 3 view .LVU90
 455 008c 2549     		ldr	r1, .L22+56
 456 008e 04F16400 		add	r0, r4, #100
 457 0092 FFF7FEFF 		bl	setMenuTexts
 458              	.LVL33:
  26:Core/Src/menu.c ****   setMenuTexts(menu_cont[Grid_setup_auto],"Automatically setup the flash pin positions");
 459              		.loc 1 26 3 view .LVU91
 460 0096 2449     		ldr	r1, .L22+60
 461 0098 04F1C800 		add	r0, r4, #200
 462 009c FFF7FEFF 		bl	setMenuTexts
 463              	.LVL34:
  27:Core/Src/menu.c ****   setMenuTexts(menu_cont[Grid_setup_manual],"Manually setup the flash pin positions");
 464              		.loc 1 27 3 view .LVU92
 465 00a0 2249     		ldr	r1, .L22+64
 466 00a2 04F59670 		add	r0, r4, #300
 467 00a6 FFF7FEFF 		bl	setMenuTexts
 468              	.LVL35:
  28:Core/Src/menu.c ****   setMenuTexts(menu_cont[Grid_setup_zero],"Set start position");
 469              		.loc 1 28 3 view .LVU93
 470 00aa 2149     		ldr	r1, .L22+68
 471 00ac 04F5C870 		add	r0, r4, #400
 472 00b0 FFF7FEFF 		bl	setMenuTexts
 473              	.LVL36:
  29:Core/Src/menu.c ****   setMenuTexts(menu_cont[Grid_setup_move],"Set next position");
 474              		.loc 1 29 3 view .LVU94
 475 00b4 1F49     		ldr	r1, .L22+72
ARM GAS  /tmp/ccZPmZxG.s 			page 13


 476 00b6 04F5FA70 		add	r0, r4, #500
 477 00ba FFF7FEFF 		bl	setMenuTexts
 478              	.LVL37:
  30:Core/Src/menu.c ****   setMenuTexts(menu_cont[Success_screen],"");
 479              		.loc 1 30 3 view .LVU95
 480 00be 1E49     		ldr	r1, .L22+76
 481 00c0 04F51670 		add	r0, r4, #600
 482 00c4 FFF7FEFF 		bl	setMenuTexts
 483              	.LVL38:
  31:Core/Src/menu.c ****   setMenuTexts(menu_cont[Fail_screen],"");
 484              		.loc 1 31 3 view .LVU96
 485 00c8 2946     		mov	r1, r5
 486 00ca 04F52F70 		add	r0, r4, #700
 487 00ce FFF7FEFF 		bl	setMenuTexts
 488              	.LVL39:
  32:Core/Src/menu.c ****   setMenuTexts(menu_cont[Next_batch],"Press SELECT when next batch loaded.\nPress CANCEL to stop fl
 489              		.loc 1 32 3 view .LVU97
 490 00d2 2946     		mov	r1, r5
 491 00d4 04F54870 		add	r0, r4, #800
 492 00d8 FFF7FEFF 		bl	setMenuTexts
 493              	.LVL40:
  33:Core/Src/menu.c **** 
 494              		.loc 1 33 3 view .LVU98
 495 00dc 1749     		ldr	r1, .L22+80
 496 00de 04F56170 		add	r0, r4, #900
 497 00e2 FFF7FEFF 		bl	setMenuTexts
 498              	.LVL41:
  35:Core/Src/menu.c **** }
 499              		.loc 1 35 3 view .LVU99
  36:Core/Src/menu.c **** 
 500              		.loc 1 36 1 is_stmt 0 view .LVU100
 501 00e6 3046     		mov	r0, r6
 502 00e8 70BD     		pop	{r4, r5, r6, pc}
 503              	.L23:
 504 00ea 00BF     		.align	2
 505              	.L22:
 506 00ec 64000000 		.word	menu_titles+100
 507 00f0 00000000 		.word	.LC0
 508 00f4 0C000000 		.word	.LC1
 509 00f8 1C000000 		.word	.LC2
 510 00fc 2C000000 		.word	.LC3
 511 0100 38000000 		.word	.LC4
 512 0104 44000000 		.word	.LC5
 513 0108 54000000 		.word	.LC6
 514 010c 64000000 		.word	.LC7
 515 0110 70000000 		.word	.LC8
 516 0114 78000000 		.word	.LC9
 517 0118 84000000 		.word	.LC10
 518 011c 94000000 		.word	.LC11
 519 0120 64000000 		.word	menu_cont+100
 520 0124 98000000 		.word	.LC12
 521 0128 BC000000 		.word	.LC13
 522 012c E4000000 		.word	.LC14
 523 0130 10010000 		.word	.LC15
 524 0134 38010000 		.word	.LC16
 525 0138 4C010000 		.word	.LC17
 526 013c 60010000 		.word	.LC18
ARM GAS  /tmp/ccZPmZxG.s 			page 14


 527              		.cfi_endproc
 528              	.LFE65:
 530              		.global	menu_cont
 531              		.section	.bss.menu_cont,"aw",%nobits
 532              		.align	2
 535              	menu_cont:
 536 0000 00000000 		.space	1100
 536      00000000 
 536      00000000 
 536      00000000 
 536      00000000 
 537              		.global	menu_titles
 538              		.section	.bss.menu_titles,"aw",%nobits
 539              		.align	2
 542              	menu_titles:
 543 0000 00000000 		.space	1100
 543      00000000 
 543      00000000 
 543      00000000 
 543      00000000 
 544              		.text
 545              	.Letext0:
 546              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 547              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 548              		.file 4 "/usr/lib/gcc/arm-none-eabi/12.2.0/include/stddef.h"
 549              		.file 5 "Core/Inc/main.h"
 550              		.file 6 "Core/Lib/st7735/fonts.h"
 551              		.file 7 "Core/Lib/st7735/st7735.h"
 552              		.file 8 "Core/Inc/menu.h"
 553              		.file 9 "/usr/arm-none-eabi/include/string.h"
 554              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
ARM GAS  /tmp/ccZPmZxG.s 			page 15


DEFINED SYMBOLS
                            *ABS*:0000000000000000 menu.c
     /tmp/ccZPmZxG.s:19     .text.serveMenuFunc:0000000000000000 $t
     /tmp/ccZPmZxG.s:25     .text.serveMenuFunc:0000000000000000 serveMenuFunc
     /tmp/ccZPmZxG.s:43     .text.drawMenuScreen:0000000000000000 $t
     /tmp/ccZPmZxG.s:49     .text.drawMenuScreen:0000000000000000 drawMenuScreen
     /tmp/ccZPmZxG.s:113    .text.drawMenuScreen:0000000000000050 $d
     /tmp/ccZPmZxG.s:542    .bss.menu_titles:0000000000000000 menu_titles
     /tmp/ccZPmZxG.s:535    .bss.menu_cont:0000000000000000 menu_cont
     /tmp/ccZPmZxG.s:121    .text.serveMenuScreen:0000000000000000 $t
     /tmp/ccZPmZxG.s:127    .text.serveMenuScreen:0000000000000000 serveMenuScreen
     /tmp/ccZPmZxG.s:245    .text.setMenuTexts:0000000000000000 $t
     /tmp/ccZPmZxG.s:251    .text.setMenuTexts:0000000000000000 setMenuTexts
     /tmp/ccZPmZxG.s:295    .rodata.initMenu.str1.4:0000000000000000 $d
     /tmp/ccZPmZxG.s:354    .text.initMenu:0000000000000000 $t
     /tmp/ccZPmZxG.s:360    .text.initMenu:0000000000000000 initMenu
     /tmp/ccZPmZxG.s:506    .text.initMenu:00000000000000ec $d
     /tmp/ccZPmZxG.s:532    .bss.menu_cont:0000000000000000 $d
     /tmp/ccZPmZxG.s:539    .bss.menu_titles:0000000000000000 $d

UNDEFINED SYMBOLS
ST7735_FillScreen
ST7735_WriteJustifyString
Font_11x18
Font_7x10
HAL_Delay
strlen
strncpy
ST7735_Init
