ARM GAS  /tmp/ccFmdvjs.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"menu.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.serveMenuFunc,"ax",%progbits
  16              		.align	1
  17              		.global	serveMenuFunc
  18              		.arch armv7-m
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu softvfp
  24              	serveMenuFunc:
  25              	.LVL0:
  26              	.LFB67:
  27              		.file 1 "Core/Src/menu.c"
   1:Core/Src/menu.c **** /**
   2:Core/Src/menu.c ****  * @file menu.c
   3:Core/Src/menu.c ****  * @author your name (you@domain.com)
   4:Core/Src/menu.c ****  * @brief 
   5:Core/Src/menu.c ****  * @version 0.1
   6:Core/Src/menu.c ****  * @date 2023-01-15
   7:Core/Src/menu.c ****  * 
   8:Core/Src/menu.c ****  * @copyright Copyright (c) 2023
   9:Core/Src/menu.c ****  * 
  10:Core/Src/menu.c ****  */
  11:Core/Src/menu.c **** #include "menu.h"
  12:Core/Src/menu.c **** 
  13:Core/Src/menu.c **** char menu_titles[TOTAL_MENUS_NUM+1][MAX_TEXT_S];
  14:Core/Src/menu.c **** char menu_cont[TOTAL_MENUS_NUM+1][MAX_TEXT_S];
  15:Core/Src/menu.c **** uint8_t menu_transition[TOTAL_MENUS_NUM+1] = {0}; 
  16:Core/Src/menu.c **** 
  17:Core/Src/menu.c **** uint8_t initMenu(struct menu_status *menu_h){
  18:Core/Src/menu.c ****   ST7735_Init();
  19:Core/Src/menu.c ****   ST7735_FillScreen(ST7735_GRAY);
  20:Core/Src/menu.c ****   menu_h->curr_screen = Home_screen;
  21:Core/Src/menu.c ****   menu_h->update_needed = true;
  22:Core/Src/menu.c ****   menu_h->alarm_count = 0;
  23:Core/Src/menu.c ****   menu_h->exec_menu = false;
  24:Core/Src/menu.c ****   menu_h->exit_menu = false;
  25:Core/Src/menu.c **** 
  26:Core/Src/menu.c ****   setMenuTexts(menu_titles[Home_screen],"Plotter ON");
  27:Core/Src/menu.c ****   setMenuTexts(menu_titles[Manual_move],"Init. man move");
  28:Core/Src/menu.c ****   setMenuTexts(menu_titles[Zero_pos],"Set Zero Pos.");
  29:Core/Src/menu.c ****   setMenuTexts(menu_titles[Grid_setup_auto],"Auto. Setup");
  30:Core/Src/menu.c ****   setMenuTexts(menu_titles[Grid_setup_manual],"Man. Setup");
  31:Core/Src/menu.c ****   setMenuTexts(menu_titles[Grid_setup_zero],"Set (0,0)-pos");
ARM GAS  /tmp/ccFmdvjs.s 			page 2


  32:Core/Src/menu.c ****   setMenuTexts(menu_titles[Grid_setup_move],"Set next-pos");
  33:Core/Src/menu.c ****   setMenuTexts(menu_titles[Success_screen],"SUCCESS!");
  34:Core/Src/menu.c ****   setMenuTexts(menu_titles[Fail_screen],"FAILED!");
  35:Core/Src/menu.c ****   setMenuTexts(menu_titles[Next_batch],"Run Next?");
  36:Core/Src/menu.c ****   setMenuTexts(menu_titles[Execute_manual],"Manual movement");
  37:Core/Src/menu.c ****   setMenuTexts(menu_titles[TOTAL_MENUS_NUM],"NEVER REACHED");
  38:Core/Src/menu.c **** 
  39:Core/Src/menu.c ****   setMenuTexts(menu_cont[Home_screen],"");
  40:Core/Src/menu.c ****   setMenuTexts(menu_cont[Manual_move],"Manually move plotter using joypad");
  41:Core/Src/menu.c ****   setMenuTexts(menu_cont[Zero_pos],"Set current possition as origin (0,0)");
  42:Core/Src/menu.c ****   setMenuTexts(menu_cont[Grid_setup_auto],"Automatically setup the flash pin positions");
  43:Core/Src/menu.c ****   setMenuTexts(menu_cont[Grid_setup_manual],"Manually setup the flash pin positions");
  44:Core/Src/menu.c ****   setMenuTexts(menu_cont[Grid_setup_zero],"Set start position");
  45:Core/Src/menu.c ****   setMenuTexts(menu_cont[Grid_setup_move],"Set next position");
  46:Core/Src/menu.c ****   setMenuTexts(menu_cont[Success_screen],"");
  47:Core/Src/menu.c ****   setMenuTexts(menu_cont[Fail_screen],"");
  48:Core/Src/menu.c ****   setMenuTexts(menu_cont[Next_batch],"Press SELECT when next batch loaded.\nPress CANCEL to stop fl
  49:Core/Src/menu.c ****   setMenuTexts(menu_cont[Execute_manual],"Move joypad to move the plotter.");
  50:Core/Src/menu.c **** 
  51:Core/Src/menu.c ****   menu_transition[Manual_move] = Execute_manual;
  52:Core/Src/menu.c ****   menu_transition[Execute_manual] = Execute_manual;
  53:Core/Src/menu.c **** 
  54:Core/Src/menu.c **** 
  55:Core/Src/menu.c **** 
  56:Core/Src/menu.c ****   return RETURN_OK;
  57:Core/Src/menu.c **** }
  58:Core/Src/menu.c **** 
  59:Core/Src/menu.c **** uint8_t serveMenuScreen(struct menu_status *menu_h, uint8_t *joy_vals){
  60:Core/Src/menu.c **** 
  61:Core/Src/menu.c ****   //in case the user selected something we don't want to change menus but activate execution of the
  62:Core/Src/menu.c ****   if(menu_h->exec_menu){
  63:Core/Src/menu.c ****     menu_h->curr_screen = menu_transition[menu_h->curr_screen];
  64:Core/Src/menu.c ****     menu_h->update_needed = true;
  65:Core/Src/menu.c ****     menu_h->exec_menu = false;
  66:Core/Src/menu.c ****     menu_h->exit_menu = false;
  67:Core/Src/menu.c ****   }
  68:Core/Src/menu.c ****   if(menu_h->exit_menu){
  69:Core/Src/menu.c ****     menu_h->curr_screen = Manual_move;
  70:Core/Src/menu.c ****     menu_h->update_needed = true;
  71:Core/Src/menu.c ****     menu_h->exec_menu = false;
  72:Core/Src/menu.c ****     menu_h->exit_menu = false;
  73:Core/Src/menu.c ****   }
  74:Core/Src/menu.c **** 
  75:Core/Src/menu.c ****   if(menu_h->curr_screen < USER_MENUS_NUM){
  76:Core/Src/menu.c ****     //joypad to the right so switch to next screen
  77:Core/Src/menu.c ****     if(joy_vals[1] > 220){
  78:Core/Src/menu.c ****       HAL_Delay(500);
  79:Core/Src/menu.c ****       if(menu_h->curr_screen < (USER_MENUS_NUM-1))menu_h->curr_screen = (menu_h->curr_screen + 1);
  80:Core/Src/menu.c ****       else menu_h->curr_screen = Home_screen + 1;
  81:Core/Src/menu.c ****       menu_h->update_needed = true;
  82:Core/Src/menu.c ****     } 
  83:Core/Src/menu.c ****     //joypad to the left so switch to previous screen
  84:Core/Src/menu.c ****     else if(joy_vals[1] < 30){
  85:Core/Src/menu.c ****       HAL_Delay(500);
  86:Core/Src/menu.c ****       if(menu_h->curr_screen > Manual_move)menu_h->curr_screen = (menu_h->curr_screen - 1);
  87:Core/Src/menu.c ****       else menu_h->curr_screen = USER_MENUS_NUM - 1;
  88:Core/Src/menu.c ****       menu_h->update_needed = true;
ARM GAS  /tmp/ccFmdvjs.s 			page 3


  89:Core/Src/menu.c ****     } 
  90:Core/Src/menu.c **** 
  91:Core/Src/menu.c ****     else;
  92:Core/Src/menu.c ****   }
  93:Core/Src/menu.c **** 
  94:Core/Src/menu.c ****   if(menu_h->update_needed == true){
  95:Core/Src/menu.c ****     drawMenuScreen(menu_h->curr_screen);
  96:Core/Src/menu.c ****     menu_h->update_needed = false;
  97:Core/Src/menu.c ****     if(menu_h->curr_screen == Home_screen){
  98:Core/Src/menu.c ****       menu_h->curr_screen += 1;
  99:Core/Src/menu.c ****       menu_h->update_needed = true; 
 100:Core/Src/menu.c ****     }
 101:Core/Src/menu.c ****     HAL_Delay(500);
 102:Core/Src/menu.c ****   }
 103:Core/Src/menu.c **** 
 104:Core/Src/menu.c ****   return RETURN_OK;
 105:Core/Src/menu.c **** }
 106:Core/Src/menu.c **** 
 107:Core/Src/menu.c **** uint8_t serveMenuFunc(menu_status *menu_h, uint8_t *joy_vals, setup_data *setup_data_h, comm_data *
  28              		.loc 1 107 112 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		.loc 1 107 112 is_stmt 0 view .LVU1
  33 0000 8C46     		mov	ip, r1
  34 0002 1146     		mov	r1, r2
  35              	.LVL1:
 108:Core/Src/menu.c ****   //no need to handle this menu
 109:Core/Src/menu.c ****   if(menu_h->curr_screen <= USER_MENUS_NUM){
  36              		.loc 1 109 3 is_stmt 1 view .LVU2
  37              		.loc 1 109 12 is_stmt 0 view .LVU3
  38 0004 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
  39              	.LVL2:
  40              		.loc 1 109 5 view .LVU4
  41 0006 062A     		cmp	r2, #6
  42 0008 01D9     		bls	.L4
 110:Core/Src/menu.c ****     return RETURN_OK;
 111:Core/Src/menu.c ****   }
 112:Core/Src/menu.c ****   
 113:Core/Src/menu.c ****   //menus that are needed to handle
 114:Core/Src/menu.c ****   switch(menu_h->curr_screen){
  43              		.loc 1 114 3 is_stmt 1 view .LVU5
  44 000a 0E2A     		cmp	r2, #14
  45 000c 01D0     		beq	.L7
  46              	.L4:
 115:Core/Src/menu.c ****     case Execute_manual:
 116:Core/Src/menu.c ****       manualControl(joy_vals, setup_data_h, comm_handle);
 117:Core/Src/menu.c ****       break;
 118:Core/Src/menu.c **** 
 119:Core/Src/menu.c ****     default:
 120:Core/Src/menu.c ****       break;
 121:Core/Src/menu.c **** 
 122:Core/Src/menu.c **** 
 123:Core/Src/menu.c ****   }
 124:Core/Src/menu.c ****   return RETURN_OK;
 125:Core/Src/menu.c **** }
  47              		.loc 1 125 1 is_stmt 0 view .LVU6
ARM GAS  /tmp/ccFmdvjs.s 			page 4


  48 000e 0020     		movs	r0, #0
  49              	.LVL3:
  50              		.loc 1 125 1 view .LVU7
  51 0010 7047     		bx	lr
  52              	.LVL4:
  53              	.L7:
 107:Core/Src/menu.c ****   //no need to handle this menu
  54              		.loc 1 107 112 view .LVU8
  55 0012 08B5     		push	{r3, lr}
  56              		.cfi_def_cfa_offset 8
  57              		.cfi_offset 3, -8
  58              		.cfi_offset 14, -4
 116:Core/Src/menu.c ****       break;
  59              		.loc 1 116 7 is_stmt 1 view .LVU9
  60 0014 1A46     		mov	r2, r3
  61 0016 6046     		mov	r0, ip
  62              	.LVL5:
 116:Core/Src/menu.c ****       break;
  63              		.loc 1 116 7 is_stmt 0 view .LVU10
  64 0018 FFF7FEFF 		bl	manualControl
  65              	.LVL6:
 117:Core/Src/menu.c **** 
  66              		.loc 1 117 7 is_stmt 1 view .LVU11
  67              		.loc 1 125 1 is_stmt 0 view .LVU12
  68 001c 0020     		movs	r0, #0
  69 001e 08BD     		pop	{r3, pc}
  70              		.cfi_endproc
  71              	.LFE67:
  73              		.section	.text.drawMenuScreen,"ax",%progbits
  74              		.align	1
  75              		.global	drawMenuScreen
  76              		.syntax unified
  77              		.thumb
  78              		.thumb_func
  79              		.fpu softvfp
  81              	drawMenuScreen:
  82              	.LVL7:
  83              	.LFB68:
 126:Core/Src/menu.c **** 
 127:Core/Src/menu.c **** 
 128:Core/Src/menu.c **** 
 129:Core/Src/menu.c **** uint8_t drawMenuScreen(enum screens req_screen){
  84              		.loc 1 129 48 is_stmt 1 view -0
  85              		.cfi_startproc
  86              		@ args = 0, pretend = 0, frame = 0
  87              		@ frame_needed = 0, uses_anonymous_args = 0
  88              		.loc 1 129 48 is_stmt 0 view .LVU14
  89 0000 70B5     		push	{r4, r5, r6, lr}
  90              		.cfi_def_cfa_offset 16
  91              		.cfi_offset 4, -16
  92              		.cfi_offset 5, -12
  93              		.cfi_offset 6, -8
  94              		.cfi_offset 14, -4
  95 0002 84B0     		sub	sp, sp, #16
  96              		.cfi_def_cfa_offset 32
  97 0004 0446     		mov	r4, r0
 130:Core/Src/menu.c ****   //grey background
ARM GAS  /tmp/ccFmdvjs.s 			page 5


 131:Core/Src/menu.c ****   ST7735_FillScreen(ST7735_GRAY);
  98              		.loc 1 131 3 is_stmt 1 view .LVU15
  99 0006 4AF21450 		movw	r0, #42260
 100              	.LVL8:
 101              		.loc 1 131 3 is_stmt 0 view .LVU16
 102 000a FFF7FEFF 		bl	ST7735_FillScreen
 103              	.LVL9:
 132:Core/Src/menu.c ****   ST7735_WriteJustifyString(10, menu_titles[req_screen], Font_11x18, ST7735_RED,ST7735_GRAY,JUST_CE
 104              		.loc 1 132 3 is_stmt 1 view .LVU17
 105              		.loc 1 132 44 is_stmt 0 view .LVU18
 106 000e 6420     		movs	r0, #100
 107 0010 00FB04F4 		mul	r4, r0, r4
 108              		.loc 1 132 3 view .LVU19
 109 0014 0E4B     		ldr	r3, .L10
 110 0016 0222     		movs	r2, #2
 111 0018 0292     		str	r2, [sp, #8]
 112 001a 4AF21456 		movw	r6, #42260
 113 001e 0196     		str	r6, [sp, #4]
 114 0020 4FF47842 		mov	r2, #63488
 115 0024 0092     		str	r2, [sp]
 116 0026 0CCB     		ldm	r3, {r2, r3}
 117 0028 0A49     		ldr	r1, .L10+4
 118 002a 2144     		add	r1, r1, r4
 119 002c 0A20     		movs	r0, #10
 120 002e FFF7FEFF 		bl	ST7735_WriteJustifyString
 121              	.LVL10:
 133:Core/Src/menu.c ****   ST7735_WriteJustifyString(50, menu_cont[req_screen], Font_7x10, ST7735_BLUE,ST7735_GRAY,JUST_LEFT
 122              		.loc 1 133 3 is_stmt 1 view .LVU20
 123 0032 094B     		ldr	r3, .L10+8
 124 0034 0025     		movs	r5, #0
 125 0036 0295     		str	r5, [sp, #8]
 126 0038 0196     		str	r6, [sp, #4]
 127 003a 1F22     		movs	r2, #31
 128 003c 0092     		str	r2, [sp]
 129 003e 0CCB     		ldm	r3, {r2, r3}
 130 0040 0649     		ldr	r1, .L10+12
 131 0042 2144     		add	r1, r1, r4
 132 0044 3220     		movs	r0, #50
 133 0046 FFF7FEFF 		bl	ST7735_WriteJustifyString
 134              	.LVL11:
 134:Core/Src/menu.c **** 
 135:Core/Src/menu.c ****   return RETURN_OK;
 135              		.loc 1 135 3 view .LVU21
 136:Core/Src/menu.c **** }
 136              		.loc 1 136 1 is_stmt 0 view .LVU22
 137 004a 2846     		mov	r0, r5
 138 004c 04B0     		add	sp, sp, #16
 139              		.cfi_def_cfa_offset 16
 140              		@ sp needed
 141 004e 70BD     		pop	{r4, r5, r6, pc}
 142              	.L11:
 143              		.align	2
 144              	.L10:
 145 0050 00000000 		.word	Font_11x18
 146 0054 00000000 		.word	.LANCHOR0
 147 0058 00000000 		.word	Font_7x10
 148 005c 00000000 		.word	.LANCHOR1
ARM GAS  /tmp/ccFmdvjs.s 			page 6


 149              		.cfi_endproc
 150              	.LFE68:
 152              		.section	.text.serveMenuScreen,"ax",%progbits
 153              		.align	1
 154              		.global	serveMenuScreen
 155              		.syntax unified
 156              		.thumb
 157              		.thumb_func
 158              		.fpu softvfp
 160              	serveMenuScreen:
 161              	.LVL12:
 162              	.LFB66:
  59:Core/Src/menu.c **** 
 163              		.loc 1 59 71 is_stmt 1 view -0
 164              		.cfi_startproc
 165              		@ args = 0, pretend = 0, frame = 0
 166              		@ frame_needed = 0, uses_anonymous_args = 0
  59:Core/Src/menu.c **** 
 167              		.loc 1 59 71 is_stmt 0 view .LVU24
 168 0000 10B5     		push	{r4, lr}
 169              		.cfi_def_cfa_offset 8
 170              		.cfi_offset 4, -8
 171              		.cfi_offset 14, -4
 172 0002 0446     		mov	r4, r0
  62:Core/Src/menu.c ****     menu_h->curr_screen = menu_transition[menu_h->curr_screen];
 173              		.loc 1 62 3 is_stmt 1 view .LVU25
  62:Core/Src/menu.c ****     menu_h->curr_screen = menu_transition[menu_h->curr_screen];
 174              		.loc 1 62 12 is_stmt 0 view .LVU26
 175 0004 C378     		ldrb	r3, [r0, #3]	@ zero_extendqisi2
  62:Core/Src/menu.c ****     menu_h->curr_screen = menu_transition[menu_h->curr_screen];
 176              		.loc 1 62 5 view .LVU27
 177 0006 43B1     		cbz	r3, .L13
  63:Core/Src/menu.c ****     menu_h->update_needed = true;
 178              		.loc 1 63 5 is_stmt 1 view .LVU28
  63:Core/Src/menu.c ****     menu_h->update_needed = true;
 179              		.loc 1 63 49 is_stmt 0 view .LVU29
 180 0008 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
  63:Core/Src/menu.c ****     menu_h->update_needed = true;
 181              		.loc 1 63 42 view .LVU30
 182 000a 274A     		ldr	r2, .L28
 183 000c D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
  63:Core/Src/menu.c ****     menu_h->update_needed = true;
 184              		.loc 1 63 25 view .LVU31
 185 000e 0370     		strb	r3, [r0]
  64:Core/Src/menu.c ****     menu_h->exec_menu = false;
 186              		.loc 1 64 5 is_stmt 1 view .LVU32
  64:Core/Src/menu.c ****     menu_h->exec_menu = false;
 187              		.loc 1 64 27 is_stmt 0 view .LVU33
 188 0010 0123     		movs	r3, #1
 189 0012 4370     		strb	r3, [r0, #1]
  65:Core/Src/menu.c ****     menu_h->exit_menu = false;
 190              		.loc 1 65 5 is_stmt 1 view .LVU34
  65:Core/Src/menu.c ****     menu_h->exit_menu = false;
 191              		.loc 1 65 23 is_stmt 0 view .LVU35
 192 0014 0023     		movs	r3, #0
 193 0016 C370     		strb	r3, [r0, #3]
  66:Core/Src/menu.c ****   }
ARM GAS  /tmp/ccFmdvjs.s 			page 7


 194              		.loc 1 66 5 is_stmt 1 view .LVU36
  66:Core/Src/menu.c ****   }
 195              		.loc 1 66 23 is_stmt 0 view .LVU37
 196 0018 0371     		strb	r3, [r0, #4]
 197              	.L13:
  68:Core/Src/menu.c ****     menu_h->curr_screen = Manual_move;
 198              		.loc 1 68 3 is_stmt 1 view .LVU38
  68:Core/Src/menu.c ****     menu_h->curr_screen = Manual_move;
 199              		.loc 1 68 12 is_stmt 0 view .LVU39
 200 001a 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
  68:Core/Src/menu.c ****     menu_h->curr_screen = Manual_move;
 201              		.loc 1 68 5 view .LVU40
 202 001c 33B1     		cbz	r3, .L14
  69:Core/Src/menu.c ****     menu_h->update_needed = true;
 203              		.loc 1 69 5 is_stmt 1 view .LVU41
  69:Core/Src/menu.c ****     menu_h->update_needed = true;
 204              		.loc 1 69 25 is_stmt 0 view .LVU42
 205 001e 0223     		movs	r3, #2
 206 0020 2370     		strb	r3, [r4]
  70:Core/Src/menu.c ****     menu_h->exec_menu = false;
 207              		.loc 1 70 5 is_stmt 1 view .LVU43
  70:Core/Src/menu.c ****     menu_h->exec_menu = false;
 208              		.loc 1 70 27 is_stmt 0 view .LVU44
 209 0022 0123     		movs	r3, #1
 210 0024 6370     		strb	r3, [r4, #1]
  71:Core/Src/menu.c ****     menu_h->exit_menu = false;
 211              		.loc 1 71 5 is_stmt 1 view .LVU45
  71:Core/Src/menu.c ****     menu_h->exit_menu = false;
 212              		.loc 1 71 23 is_stmt 0 view .LVU46
 213 0026 0023     		movs	r3, #0
 214 0028 E370     		strb	r3, [r4, #3]
  72:Core/Src/menu.c ****   }
 215              		.loc 1 72 5 is_stmt 1 view .LVU47
  72:Core/Src/menu.c ****   }
 216              		.loc 1 72 23 is_stmt 0 view .LVU48
 217 002a 2371     		strb	r3, [r4, #4]
 218              	.L14:
  75:Core/Src/menu.c ****     //joypad to the right so switch to next screen
 219              		.loc 1 75 3 is_stmt 1 view .LVU49
  75:Core/Src/menu.c ****     //joypad to the right so switch to next screen
 220              		.loc 1 75 12 is_stmt 0 view .LVU50
 221 002c 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
  75:Core/Src/menu.c ****     //joypad to the right so switch to next screen
 222              		.loc 1 75 5 view .LVU51
 223 002e 052B     		cmp	r3, #5
 224 0030 04D8     		bhi	.L15
  77:Core/Src/menu.c ****       HAL_Delay(500);
 225              		.loc 1 77 5 is_stmt 1 view .LVU52
  77:Core/Src/menu.c ****       HAL_Delay(500);
 226              		.loc 1 77 16 is_stmt 0 view .LVU53
 227 0032 4B78     		ldrb	r3, [r1, #1]	@ zero_extendqisi2
  77:Core/Src/menu.c ****       HAL_Delay(500);
 228              		.loc 1 77 7 view .LVU54
 229 0034 DC2B     		cmp	r3, #220
 230 0036 06D8     		bhi	.L24
  84:Core/Src/menu.c ****       HAL_Delay(500);
 231              		.loc 1 84 10 is_stmt 1 view .LVU55
ARM GAS  /tmp/ccFmdvjs.s 			page 8


  84:Core/Src/menu.c ****       HAL_Delay(500);
 232              		.loc 1 84 12 is_stmt 0 view .LVU56
 233 0038 1D2B     		cmp	r3, #29
 234 003a 13D9     		bls	.L25
 235              	.LVL13:
 236              	.L15:
  94:Core/Src/menu.c ****     drawMenuScreen(menu_h->curr_screen);
 237              		.loc 1 94 3 is_stmt 1 view .LVU57
  94:Core/Src/menu.c ****     drawMenuScreen(menu_h->curr_screen);
 238              		.loc 1 94 12 is_stmt 0 view .LVU58
 239 003c 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
  94:Core/Src/menu.c ****     drawMenuScreen(menu_h->curr_screen);
 240              		.loc 1 94 5 view .LVU59
 241 003e 012B     		cmp	r3, #1
 242 0040 1FD0     		beq	.L26
 243              	.L21:
 104:Core/Src/menu.c **** }
 244              		.loc 1 104 3 is_stmt 1 view .LVU60
 105:Core/Src/menu.c **** 
 245              		.loc 1 105 1 is_stmt 0 view .LVU61
 246 0042 0020     		movs	r0, #0
 247 0044 10BD     		pop	{r4, pc}
 248              	.LVL14:
 249              	.L24:
  78:Core/Src/menu.c ****       if(menu_h->curr_screen < (USER_MENUS_NUM-1))menu_h->curr_screen = (menu_h->curr_screen + 1);
 250              		.loc 1 78 7 is_stmt 1 view .LVU62
 251 0046 4FF4FA70 		mov	r0, #500
 252              	.LVL15:
  78:Core/Src/menu.c ****       if(menu_h->curr_screen < (USER_MENUS_NUM-1))menu_h->curr_screen = (menu_h->curr_screen + 1);
 253              		.loc 1 78 7 is_stmt 0 view .LVU63
 254 004a FFF7FEFF 		bl	HAL_Delay
 255              	.LVL16:
  79:Core/Src/menu.c ****       else menu_h->curr_screen = Home_screen + 1;
 256              		.loc 1 79 7 is_stmt 1 view .LVU64
  79:Core/Src/menu.c ****       else menu_h->curr_screen = Home_screen + 1;
 257              		.loc 1 79 16 is_stmt 0 view .LVU65
 258 004e 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
  79:Core/Src/menu.c ****       else menu_h->curr_screen = Home_screen + 1;
 259              		.loc 1 79 9 view .LVU66
 260 0050 042B     		cmp	r3, #4
 261 0052 04D8     		bhi	.L17
  79:Core/Src/menu.c ****       else menu_h->curr_screen = Home_screen + 1;
 262              		.loc 1 79 51 is_stmt 1 discriminator 1 view .LVU67
  79:Core/Src/menu.c ****       else menu_h->curr_screen = Home_screen + 1;
 263              		.loc 1 79 94 is_stmt 0 discriminator 1 view .LVU68
 264 0054 0133     		adds	r3, r3, #1
  79:Core/Src/menu.c ****       else menu_h->curr_screen = Home_screen + 1;
 265              		.loc 1 79 71 discriminator 1 view .LVU69
 266 0056 2370     		strb	r3, [r4]
 267              	.L18:
  81:Core/Src/menu.c ****     } 
 268              		.loc 1 81 7 is_stmt 1 view .LVU70
  81:Core/Src/menu.c ****     } 
 269              		.loc 1 81 29 is_stmt 0 view .LVU71
 270 0058 0123     		movs	r3, #1
 271 005a 6370     		strb	r3, [r4, #1]
 272 005c EEE7     		b	.L15
ARM GAS  /tmp/ccFmdvjs.s 			page 9


 273              	.L17:
  80:Core/Src/menu.c ****       menu_h->update_needed = true;
 274              		.loc 1 80 12 is_stmt 1 view .LVU72
  80:Core/Src/menu.c ****       menu_h->update_needed = true;
 275              		.loc 1 80 32 is_stmt 0 view .LVU73
 276 005e 0223     		movs	r3, #2
 277 0060 2370     		strb	r3, [r4]
 278 0062 F9E7     		b	.L18
 279              	.LVL17:
 280              	.L25:
  85:Core/Src/menu.c ****       if(menu_h->curr_screen > Manual_move)menu_h->curr_screen = (menu_h->curr_screen - 1);
 281              		.loc 1 85 7 is_stmt 1 view .LVU74
 282 0064 4FF4FA70 		mov	r0, #500
 283              	.LVL18:
  85:Core/Src/menu.c ****       if(menu_h->curr_screen > Manual_move)menu_h->curr_screen = (menu_h->curr_screen - 1);
 284              		.loc 1 85 7 is_stmt 0 view .LVU75
 285 0068 FFF7FEFF 		bl	HAL_Delay
 286              	.LVL19:
  86:Core/Src/menu.c ****       else menu_h->curr_screen = USER_MENUS_NUM - 1;
 287              		.loc 1 86 7 is_stmt 1 view .LVU76
  86:Core/Src/menu.c ****       else menu_h->curr_screen = USER_MENUS_NUM - 1;
 288              		.loc 1 86 16 is_stmt 0 view .LVU77
 289 006c 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
  86:Core/Src/menu.c ****       else menu_h->curr_screen = USER_MENUS_NUM - 1;
 290              		.loc 1 86 9 view .LVU78
 291 006e 022B     		cmp	r3, #2
 292 0070 04D9     		bls	.L19
  86:Core/Src/menu.c ****       else menu_h->curr_screen = USER_MENUS_NUM - 1;
 293              		.loc 1 86 44 is_stmt 1 discriminator 1 view .LVU79
  86:Core/Src/menu.c ****       else menu_h->curr_screen = USER_MENUS_NUM - 1;
 294              		.loc 1 86 87 is_stmt 0 discriminator 1 view .LVU80
 295 0072 013B     		subs	r3, r3, #1
  86:Core/Src/menu.c ****       else menu_h->curr_screen = USER_MENUS_NUM - 1;
 296              		.loc 1 86 64 discriminator 1 view .LVU81
 297 0074 2370     		strb	r3, [r4]
 298              	.L20:
  88:Core/Src/menu.c ****     } 
 299              		.loc 1 88 7 is_stmt 1 view .LVU82
  88:Core/Src/menu.c ****     } 
 300              		.loc 1 88 29 is_stmt 0 view .LVU83
 301 0076 0123     		movs	r3, #1
 302 0078 6370     		strb	r3, [r4, #1]
 303 007a DFE7     		b	.L15
 304              	.L19:
  87:Core/Src/menu.c ****       menu_h->update_needed = true;
 305              		.loc 1 87 12 is_stmt 1 view .LVU84
  87:Core/Src/menu.c ****       menu_h->update_needed = true;
 306              		.loc 1 87 32 is_stmt 0 view .LVU85
 307 007c 0523     		movs	r3, #5
 308 007e 2370     		strb	r3, [r4]
 309 0080 F9E7     		b	.L20
 310              	.L26:
  95:Core/Src/menu.c ****     menu_h->update_needed = false;
 311              		.loc 1 95 5 is_stmt 1 view .LVU86
 312 0082 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
 313 0084 FFF7FEFF 		bl	drawMenuScreen
 314              	.LVL20:
ARM GAS  /tmp/ccFmdvjs.s 			page 10


  96:Core/Src/menu.c ****     if(menu_h->curr_screen == Home_screen){
 315              		.loc 1 96 5 view .LVU87
  96:Core/Src/menu.c ****     if(menu_h->curr_screen == Home_screen){
 316              		.loc 1 96 27 is_stmt 0 view .LVU88
 317 0088 0023     		movs	r3, #0
 318 008a 6370     		strb	r3, [r4, #1]
  97:Core/Src/menu.c ****       menu_h->curr_screen += 1;
 319              		.loc 1 97 5 is_stmt 1 view .LVU89
  97:Core/Src/menu.c ****       menu_h->curr_screen += 1;
 320              		.loc 1 97 14 is_stmt 0 view .LVU90
 321 008c 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
  97:Core/Src/menu.c ****       menu_h->curr_screen += 1;
 322              		.loc 1 97 7 view .LVU91
 323 008e 012B     		cmp	r3, #1
 324 0090 04D0     		beq	.L27
 325              	.L22:
 101:Core/Src/menu.c ****   }
 326              		.loc 1 101 5 is_stmt 1 view .LVU92
 327 0092 4FF4FA70 		mov	r0, #500
 328 0096 FFF7FEFF 		bl	HAL_Delay
 329              	.LVL21:
 330 009a D2E7     		b	.L21
 331              	.L27:
  98:Core/Src/menu.c ****       menu_h->update_needed = true; 
 332              		.loc 1 98 7 view .LVU93
  98:Core/Src/menu.c ****       menu_h->update_needed = true; 
 333              		.loc 1 98 27 is_stmt 0 view .LVU94
 334 009c 0133     		adds	r3, r3, #1
 335 009e 2370     		strb	r3, [r4]
  99:Core/Src/menu.c ****     }
 336              		.loc 1 99 7 is_stmt 1 view .LVU95
  99:Core/Src/menu.c ****     }
 337              		.loc 1 99 29 is_stmt 0 view .LVU96
 338 00a0 0123     		movs	r3, #1
 339 00a2 6370     		strb	r3, [r4, #1]
 340 00a4 F5E7     		b	.L22
 341              	.L29:
 342 00a6 00BF     		.align	2
 343              	.L28:
 344 00a8 00000000 		.word	.LANCHOR2
 345              		.cfi_endproc
 346              	.LFE66:
 348              		.section	.text.setMenuTexts,"ax",%progbits
 349              		.align	1
 350              		.global	setMenuTexts
 351              		.syntax unified
 352              		.thumb
 353              		.thumb_func
 354              		.fpu softvfp
 356              	setMenuTexts:
 357              	.LVL22:
 358              	.LFB69:
 137:Core/Src/menu.c **** 
 138:Core/Src/menu.c **** //TODO: This could maybe be completely removed it is just a wrapper anyway
 139:Core/Src/menu.c **** uint8_t setMenuTexts(char *dest, const char *cont){
 359              		.loc 1 139 51 is_stmt 1 view -0
 360              		.cfi_startproc
ARM GAS  /tmp/ccFmdvjs.s 			page 11


 361              		@ args = 0, pretend = 0, frame = 0
 362              		@ frame_needed = 0, uses_anonymous_args = 0
 363              		.loc 1 139 51 is_stmt 0 view .LVU98
 364 0000 08B5     		push	{r3, lr}
 365              		.cfi_def_cfa_offset 8
 366              		.cfi_offset 3, -8
 367              		.cfi_offset 14, -4
 140:Core/Src/menu.c ****   return copyString(dest, cont);
 368              		.loc 1 140 3 is_stmt 1 view .LVU99
 369              		.loc 1 140 10 is_stmt 0 view .LVU100
 370 0002 FFF7FEFF 		bl	copyString
 371              	.LVL23:
 141:Core/Src/menu.c **** }
 372              		.loc 1 141 1 view .LVU101
 373 0006 08BD     		pop	{r3, pc}
 374              		.cfi_endproc
 375              	.LFE69:
 377              		.section	.rodata.initMenu.str1.4,"aMS",%progbits,1
 378              		.align	2
 379              	.LC0:
 380 0000 506C6F74 		.ascii	"Plotter ON\000"
 380      74657220 
 380      4F4E00
 381 000b 00       		.align	2
 382              	.LC1:
 383 000c 496E6974 		.ascii	"Init. man move\000"
 383      2E206D61 
 383      6E206D6F 
 383      766500
 384 001b 00       		.align	2
 385              	.LC2:
 386 001c 53657420 		.ascii	"Set Zero Pos.\000"
 386      5A65726F 
 386      20506F73 
 386      2E00
 387 002a 0000     		.align	2
 388              	.LC3:
 389 002c 4175746F 		.ascii	"Auto. Setup\000"
 389      2E205365 
 389      74757000 
 390              		.align	2
 391              	.LC4:
 392 0038 4D616E2E 		.ascii	"Man. Setup\000"
 392      20536574 
 392      757000
 393 0043 00       		.align	2
 394              	.LC5:
 395 0044 53657420 		.ascii	"Set (0,0)-pos\000"
 395      28302C30 
 395      292D706F 
 395      7300
 396 0052 0000     		.align	2
 397              	.LC6:
 398 0054 53657420 		.ascii	"Set next-pos\000"
 398      6E657874 
 398      2D706F73 
 398      00
ARM GAS  /tmp/ccFmdvjs.s 			page 12


 399 0061 000000   		.align	2
 400              	.LC7:
 401 0064 53554343 		.ascii	"SUCCESS!\000"
 401      45535321 
 401      00
 402 006d 000000   		.align	2
 403              	.LC8:
 404 0070 4641494C 		.ascii	"FAILED!\000"
 404      45442100 
 405              		.align	2
 406              	.LC9:
 407 0078 52756E20 		.ascii	"Run Next?\000"
 407      4E657874 
 407      3F00
 408 0082 0000     		.align	2
 409              	.LC10:
 410 0084 4D616E75 		.ascii	"Manual movement\000"
 410      616C206D 
 410      6F76656D 
 410      656E7400 
 411              		.align	2
 412              	.LC11:
 413 0094 4E455645 		.ascii	"NEVER REACHED\000"
 413      52205245 
 413      41434845 
 413      4400
 414 00a2 0000     		.align	2
 415              	.LC12:
 416 00a4 00       		.ascii	"\000"
 417 00a5 000000   		.align	2
 418              	.LC13:
 419 00a8 4D616E75 		.ascii	"Manually move plotter using joypad\000"
 419      616C6C79 
 419      206D6F76 
 419      6520706C 
 419      6F747465 
 420 00cb 00       		.align	2
 421              	.LC14:
 422 00cc 53657420 		.ascii	"Set current possition as origin (0,0)\000"
 422      63757272 
 422      656E7420 
 422      706F7373 
 422      6974696F 
 423 00f2 0000     		.align	2
 424              	.LC15:
 425 00f4 4175746F 		.ascii	"Automatically setup the flash pin positions\000"
 425      6D617469 
 425      63616C6C 
 425      79207365 
 425      74757020 
 426              		.align	2
 427              	.LC16:
 428 0120 4D616E75 		.ascii	"Manually setup the flash pin positions\000"
 428      616C6C79 
 428      20736574 
 428      75702074 
 428      68652066 
ARM GAS  /tmp/ccFmdvjs.s 			page 13


 429 0147 00       		.align	2
 430              	.LC17:
 431 0148 53657420 		.ascii	"Set start position\000"
 431      73746172 
 431      7420706F 
 431      73697469 
 431      6F6E00
 432 015b 00       		.align	2
 433              	.LC18:
 434 015c 53657420 		.ascii	"Set next position\000"
 434      6E657874 
 434      20706F73 
 434      6974696F 
 434      6E00
 435 016e 0000     		.align	2
 436              	.LC19:
 437 0170 50726573 		.ascii	"Press SELECT when next batch loaded.\012Press CANCE"
 437      73205345 
 437      4C454354 
 437      20776865 
 437      6E206E65 
 438 01a0 4C20746F 		.ascii	"L to stop flashing.\000"
 438      2073746F 
 438      7020666C 
 438      61736869 
 438      6E672E00 
 439              		.align	2
 440              	.LC20:
 441 01b4 4D6F7665 		.ascii	"Move joypad to move the plotter.\000"
 441      206A6F79 
 441      70616420 
 441      746F206D 
 441      6F766520 
 442              		.section	.text.initMenu,"ax",%progbits
 443              		.align	1
 444              		.global	initMenu
 445              		.syntax unified
 446              		.thumb
 447              		.thumb_func
 448              		.fpu softvfp
 450              	initMenu:
 451              	.LVL24:
 452              	.LFB65:
  17:Core/Src/menu.c ****   ST7735_Init();
 453              		.loc 1 17 45 is_stmt 1 view -0
 454              		.cfi_startproc
 455              		@ args = 0, pretend = 0, frame = 0
 456              		@ frame_needed = 0, uses_anonymous_args = 0
  17:Core/Src/menu.c ****   ST7735_Init();
 457              		.loc 1 17 45 is_stmt 0 view .LVU103
 458 0000 70B5     		push	{r4, r5, r6, lr}
 459              		.cfi_def_cfa_offset 16
 460              		.cfi_offset 4, -16
 461              		.cfi_offset 5, -12
 462              		.cfi_offset 6, -8
 463              		.cfi_offset 14, -4
 464 0002 0446     		mov	r4, r0
ARM GAS  /tmp/ccFmdvjs.s 			page 14


  18:Core/Src/menu.c ****   ST7735_FillScreen(ST7735_GRAY);
 465              		.loc 1 18 3 is_stmt 1 view .LVU104
 466 0004 FFF7FEFF 		bl	ST7735_Init
 467              	.LVL25:
  19:Core/Src/menu.c ****   menu_h->curr_screen = Home_screen;
 468              		.loc 1 19 3 view .LVU105
 469 0008 4AF21450 		movw	r0, #42260
 470 000c FFF7FEFF 		bl	ST7735_FillScreen
 471              	.LVL26:
  20:Core/Src/menu.c ****   menu_h->update_needed = true;
 472              		.loc 1 20 3 view .LVU106
  20:Core/Src/menu.c ****   menu_h->update_needed = true;
 473              		.loc 1 20 23 is_stmt 0 view .LVU107
 474 0010 0123     		movs	r3, #1
 475 0012 2370     		strb	r3, [r4]
  21:Core/Src/menu.c ****   menu_h->alarm_count = 0;
 476              		.loc 1 21 3 is_stmt 1 view .LVU108
  21:Core/Src/menu.c ****   menu_h->alarm_count = 0;
 477              		.loc 1 21 25 is_stmt 0 view .LVU109
 478 0014 6370     		strb	r3, [r4, #1]
  22:Core/Src/menu.c ****   menu_h->exec_menu = false;
 479              		.loc 1 22 3 is_stmt 1 view .LVU110
  22:Core/Src/menu.c ****   menu_h->exec_menu = false;
 480              		.loc 1 22 23 is_stmt 0 view .LVU111
 481 0016 0025     		movs	r5, #0
 482 0018 A570     		strb	r5, [r4, #2]
  23:Core/Src/menu.c ****   menu_h->exit_menu = false;
 483              		.loc 1 23 3 is_stmt 1 view .LVU112
  23:Core/Src/menu.c ****   menu_h->exit_menu = false;
 484              		.loc 1 23 21 is_stmt 0 view .LVU113
 485 001a E570     		strb	r5, [r4, #3]
  24:Core/Src/menu.c **** 
 486              		.loc 1 24 3 is_stmt 1 view .LVU114
  24:Core/Src/menu.c **** 
 487              		.loc 1 24 21 is_stmt 0 view .LVU115
 488 001c 2571     		strb	r5, [r4, #4]
  26:Core/Src/menu.c ****   setMenuTexts(menu_titles[Manual_move],"Init. man move");
 489              		.loc 1 26 3 is_stmt 1 view .LVU116
 490 001e 3E4C     		ldr	r4, .L34
 491              	.LVL27:
  26:Core/Src/menu.c ****   setMenuTexts(menu_titles[Manual_move],"Init. man move");
 492              		.loc 1 26 3 is_stmt 0 view .LVU117
 493 0020 3E49     		ldr	r1, .L34+4
 494 0022 04F16400 		add	r0, r4, #100
 495 0026 FFF7FEFF 		bl	setMenuTexts
 496              	.LVL28:
  27:Core/Src/menu.c ****   setMenuTexts(menu_titles[Zero_pos],"Set Zero Pos.");
 497              		.loc 1 27 3 is_stmt 1 view .LVU118
 498 002a 3D49     		ldr	r1, .L34+8
 499 002c 04F1C800 		add	r0, r4, #200
 500 0030 FFF7FEFF 		bl	setMenuTexts
 501              	.LVL29:
  28:Core/Src/menu.c ****   setMenuTexts(menu_titles[Grid_setup_auto],"Auto. Setup");
 502              		.loc 1 28 3 view .LVU119
 503 0034 3B49     		ldr	r1, .L34+12
 504 0036 04F59670 		add	r0, r4, #300
 505 003a FFF7FEFF 		bl	setMenuTexts
ARM GAS  /tmp/ccFmdvjs.s 			page 15


 506              	.LVL30:
  29:Core/Src/menu.c ****   setMenuTexts(menu_titles[Grid_setup_manual],"Man. Setup");
 507              		.loc 1 29 3 view .LVU120
 508 003e 3A49     		ldr	r1, .L34+16
 509 0040 04F5C870 		add	r0, r4, #400
 510 0044 FFF7FEFF 		bl	setMenuTexts
 511              	.LVL31:
  30:Core/Src/menu.c ****   setMenuTexts(menu_titles[Grid_setup_zero],"Set (0,0)-pos");
 512              		.loc 1 30 3 view .LVU121
 513 0048 3849     		ldr	r1, .L34+20
 514 004a 04F5FA70 		add	r0, r4, #500
 515 004e FFF7FEFF 		bl	setMenuTexts
 516              	.LVL32:
  31:Core/Src/menu.c ****   setMenuTexts(menu_titles[Grid_setup_move],"Set next-pos");
 517              		.loc 1 31 3 view .LVU122
 518 0052 3749     		ldr	r1, .L34+24
 519 0054 04F24C40 		addw	r0, r4, #1100
 520 0058 FFF7FEFF 		bl	setMenuTexts
 521              	.LVL33:
  32:Core/Src/menu.c ****   setMenuTexts(menu_titles[Success_screen],"SUCCESS!");
 522              		.loc 1 32 3 view .LVU123
 523 005c 3549     		ldr	r1, .L34+28
 524 005e 04F59660 		add	r0, r4, #1200
 525 0062 FFF7FEFF 		bl	setMenuTexts
 526              	.LVL34:
  33:Core/Src/menu.c ****   setMenuTexts(menu_titles[Fail_screen],"FAILED!");
 527              		.loc 1 33 3 view .LVU124
 528 0066 3449     		ldr	r1, .L34+32
 529 0068 04F2DC50 		addw	r0, r4, #1500
 530 006c FFF7FEFF 		bl	setMenuTexts
 531              	.LVL35:
  34:Core/Src/menu.c ****   setMenuTexts(menu_titles[Next_batch],"Run Next?");
 532              		.loc 1 34 3 view .LVU125
 533 0070 3249     		ldr	r1, .L34+36
 534 0072 04F5C860 		add	r0, r4, #1600
 535 0076 FFF7FEFF 		bl	setMenuTexts
 536              	.LVL36:
  35:Core/Src/menu.c ****   setMenuTexts(menu_titles[Execute_manual],"Manual movement");
 537              		.loc 1 35 3 view .LVU126
 538 007a 3149     		ldr	r1, .L34+40
 539 007c 04F2A460 		addw	r0, r4, #1700
 540 0080 FFF7FEFF 		bl	setMenuTexts
 541              	.LVL37:
  36:Core/Src/menu.c ****   setMenuTexts(menu_titles[TOTAL_MENUS_NUM],"NEVER REACHED");
 542              		.loc 1 36 3 view .LVU127
 543 0084 2F49     		ldr	r1, .L34+44
 544 0086 04F5AF60 		add	r0, r4, #1400
 545 008a FFF7FEFF 		bl	setMenuTexts
 546              	.LVL38:
  37:Core/Src/menu.c **** 
 547              		.loc 1 37 3 view .LVU128
 548 008e 2E49     		ldr	r1, .L34+48
 549 0090 04F5E160 		add	r0, r4, #1800
 550 0094 FFF7FEFF 		bl	setMenuTexts
 551              	.LVL39:
  39:Core/Src/menu.c ****   setMenuTexts(menu_cont[Manual_move],"Manually move plotter using joypad");
 552              		.loc 1 39 3 view .LVU129
ARM GAS  /tmp/ccFmdvjs.s 			page 16


 553 0098 2C4E     		ldr	r6, .L34+52
 554 009a 2D4C     		ldr	r4, .L34+56
 555 009c 3146     		mov	r1, r6
 556 009e 04F16400 		add	r0, r4, #100
 557 00a2 FFF7FEFF 		bl	setMenuTexts
 558              	.LVL40:
  40:Core/Src/menu.c ****   setMenuTexts(menu_cont[Zero_pos],"Set current possition as origin (0,0)");
 559              		.loc 1 40 3 view .LVU130
 560 00a6 2B49     		ldr	r1, .L34+60
 561 00a8 04F1C800 		add	r0, r4, #200
 562 00ac FFF7FEFF 		bl	setMenuTexts
 563              	.LVL41:
  41:Core/Src/menu.c ****   setMenuTexts(menu_cont[Grid_setup_auto],"Automatically setup the flash pin positions");
 564              		.loc 1 41 3 view .LVU131
 565 00b0 2949     		ldr	r1, .L34+64
 566 00b2 04F59670 		add	r0, r4, #300
 567 00b6 FFF7FEFF 		bl	setMenuTexts
 568              	.LVL42:
  42:Core/Src/menu.c ****   setMenuTexts(menu_cont[Grid_setup_manual],"Manually setup the flash pin positions");
 569              		.loc 1 42 3 view .LVU132
 570 00ba 2849     		ldr	r1, .L34+68
 571 00bc 04F5C870 		add	r0, r4, #400
 572 00c0 FFF7FEFF 		bl	setMenuTexts
 573              	.LVL43:
  43:Core/Src/menu.c ****   setMenuTexts(menu_cont[Grid_setup_zero],"Set start position");
 574              		.loc 1 43 3 view .LVU133
 575 00c4 2649     		ldr	r1, .L34+72
 576 00c6 04F5FA70 		add	r0, r4, #500
 577 00ca FFF7FEFF 		bl	setMenuTexts
 578              	.LVL44:
  44:Core/Src/menu.c ****   setMenuTexts(menu_cont[Grid_setup_move],"Set next position");
 579              		.loc 1 44 3 view .LVU134
 580 00ce 2549     		ldr	r1, .L34+76
 581 00d0 04F24C40 		addw	r0, r4, #1100
 582 00d4 FFF7FEFF 		bl	setMenuTexts
 583              	.LVL45:
  45:Core/Src/menu.c ****   setMenuTexts(menu_cont[Success_screen],"");
 584              		.loc 1 45 3 view .LVU135
 585 00d8 2349     		ldr	r1, .L34+80
 586 00da 04F59660 		add	r0, r4, #1200
 587 00de FFF7FEFF 		bl	setMenuTexts
 588              	.LVL46:
  46:Core/Src/menu.c ****   setMenuTexts(menu_cont[Fail_screen],"");
 589              		.loc 1 46 3 view .LVU136
 590 00e2 3146     		mov	r1, r6
 591 00e4 04F2DC50 		addw	r0, r4, #1500
 592 00e8 FFF7FEFF 		bl	setMenuTexts
 593              	.LVL47:
  47:Core/Src/menu.c ****   setMenuTexts(menu_cont[Next_batch],"Press SELECT when next batch loaded.\nPress CANCEL to stop fl
 594              		.loc 1 47 3 view .LVU137
 595 00ec 3146     		mov	r1, r6
 596 00ee 04F5C860 		add	r0, r4, #1600
 597 00f2 FFF7FEFF 		bl	setMenuTexts
 598              	.LVL48:
  48:Core/Src/menu.c ****   setMenuTexts(menu_cont[Execute_manual],"Move joypad to move the plotter.");
 599              		.loc 1 48 3 view .LVU138
 600 00f6 1D49     		ldr	r1, .L34+84
ARM GAS  /tmp/ccFmdvjs.s 			page 17


 601 00f8 04F2A460 		addw	r0, r4, #1700
 602 00fc FFF7FEFF 		bl	setMenuTexts
 603              	.LVL49:
  49:Core/Src/menu.c **** 
 604              		.loc 1 49 3 view .LVU139
 605 0100 1B49     		ldr	r1, .L34+88
 606 0102 04F5AF60 		add	r0, r4, #1400
 607 0106 FFF7FEFF 		bl	setMenuTexts
 608              	.LVL50:
  51:Core/Src/menu.c ****   menu_transition[Execute_manual] = Execute_manual;
 609              		.loc 1 51 3 view .LVU140
  51:Core/Src/menu.c ****   menu_transition[Execute_manual] = Execute_manual;
 610              		.loc 1 51 32 is_stmt 0 view .LVU141
 611 010a 1A4B     		ldr	r3, .L34+92
 612 010c 0E22     		movs	r2, #14
 613 010e 9A70     		strb	r2, [r3, #2]
  52:Core/Src/menu.c **** 
 614              		.loc 1 52 3 is_stmt 1 view .LVU142
  52:Core/Src/menu.c **** 
 615              		.loc 1 52 35 is_stmt 0 view .LVU143
 616 0110 9A73     		strb	r2, [r3, #14]
  56:Core/Src/menu.c **** }
 617              		.loc 1 56 3 is_stmt 1 view .LVU144
  57:Core/Src/menu.c **** 
 618              		.loc 1 57 1 is_stmt 0 view .LVU145
 619 0112 2846     		mov	r0, r5
 620 0114 70BD     		pop	{r4, r5, r6, pc}
 621              	.L35:
 622 0116 00BF     		.align	2
 623              	.L34:
 624 0118 00000000 		.word	.LANCHOR0
 625 011c 00000000 		.word	.LC0
 626 0120 0C000000 		.word	.LC1
 627 0124 1C000000 		.word	.LC2
 628 0128 2C000000 		.word	.LC3
 629 012c 38000000 		.word	.LC4
 630 0130 44000000 		.word	.LC5
 631 0134 54000000 		.word	.LC6
 632 0138 64000000 		.word	.LC7
 633 013c 70000000 		.word	.LC8
 634 0140 78000000 		.word	.LC9
 635 0144 84000000 		.word	.LC10
 636 0148 94000000 		.word	.LC11
 637 014c A4000000 		.word	.LC12
 638 0150 00000000 		.word	.LANCHOR1
 639 0154 A8000000 		.word	.LC13
 640 0158 CC000000 		.word	.LC14
 641 015c F4000000 		.word	.LC15
 642 0160 20010000 		.word	.LC16
 643 0164 48010000 		.word	.LC17
 644 0168 5C010000 		.word	.LC18
 645 016c 70010000 		.word	.LC19
 646 0170 B4010000 		.word	.LC20
 647 0174 00000000 		.word	.LANCHOR2
 648              		.cfi_endproc
 649              	.LFE65:
 651              		.global	menu_transition
ARM GAS  /tmp/ccFmdvjs.s 			page 18


 652              		.global	menu_cont
 653              		.global	menu_titles
 654              		.section	.bss.menu_cont,"aw",%nobits
 655              		.align	2
 656              		.set	.LANCHOR1,. + 0
 659              	menu_cont:
 660 0000 00000000 		.space	1900
 660      00000000 
 660      00000000 
 660      00000000 
 660      00000000 
 661              		.section	.bss.menu_titles,"aw",%nobits
 662              		.align	2
 663              		.set	.LANCHOR0,. + 0
 666              	menu_titles:
 667 0000 00000000 		.space	1900
 667      00000000 
 667      00000000 
 667      00000000 
 667      00000000 
 668              		.section	.bss.menu_transition,"aw",%nobits
 669              		.align	2
 670              		.set	.LANCHOR2,. + 0
 673              	menu_transition:
 674 0000 00000000 		.space	19
 674      00000000 
 674      00000000 
 674      00000000 
 674      000000
 675              		.text
 676              	.Letext0:
 677              		.file 2 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stdint.h"
 678              		.file 3 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 679              		.file 4 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 680              		.file 5 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 681              		.file 6 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 682              		.file 7 "Core/Inc/main.h"
 683              		.file 8 "Core/Lib/st7735/fonts.h"
 684              		.file 9 "Core/Lib/st7735/st7735.h"
 685              		.file 10 "Core/Inc/menu.h"
 686              		.file 11 "Core/Inc/utils.h"
 687              		.file 12 "Core/Inc/execution.h"
 688              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
ARM GAS  /tmp/ccFmdvjs.s 			page 19


DEFINED SYMBOLS
                            *ABS*:0000000000000000 menu.c
     /tmp/ccFmdvjs.s:16     .text.serveMenuFunc:0000000000000000 $t
     /tmp/ccFmdvjs.s:24     .text.serveMenuFunc:0000000000000000 serveMenuFunc
     /tmp/ccFmdvjs.s:74     .text.drawMenuScreen:0000000000000000 $t
     /tmp/ccFmdvjs.s:81     .text.drawMenuScreen:0000000000000000 drawMenuScreen
     /tmp/ccFmdvjs.s:145    .text.drawMenuScreen:0000000000000050 $d
     /tmp/ccFmdvjs.s:153    .text.serveMenuScreen:0000000000000000 $t
     /tmp/ccFmdvjs.s:160    .text.serveMenuScreen:0000000000000000 serveMenuScreen
     /tmp/ccFmdvjs.s:344    .text.serveMenuScreen:00000000000000a8 $d
     /tmp/ccFmdvjs.s:349    .text.setMenuTexts:0000000000000000 $t
     /tmp/ccFmdvjs.s:356    .text.setMenuTexts:0000000000000000 setMenuTexts
     /tmp/ccFmdvjs.s:378    .rodata.initMenu.str1.4:0000000000000000 $d
     /tmp/ccFmdvjs.s:443    .text.initMenu:0000000000000000 $t
     /tmp/ccFmdvjs.s:450    .text.initMenu:0000000000000000 initMenu
     /tmp/ccFmdvjs.s:624    .text.initMenu:0000000000000118 $d
     /tmp/ccFmdvjs.s:673    .bss.menu_transition:0000000000000000 menu_transition
     /tmp/ccFmdvjs.s:659    .bss.menu_cont:0000000000000000 menu_cont
     /tmp/ccFmdvjs.s:666    .bss.menu_titles:0000000000000000 menu_titles
     /tmp/ccFmdvjs.s:655    .bss.menu_cont:0000000000000000 $d
     /tmp/ccFmdvjs.s:662    .bss.menu_titles:0000000000000000 $d
     /tmp/ccFmdvjs.s:669    .bss.menu_transition:0000000000000000 $d

UNDEFINED SYMBOLS
manualControl
ST7735_FillScreen
ST7735_WriteJustifyString
Font_11x18
Font_7x10
HAL_Delay
copyString
ST7735_Init
