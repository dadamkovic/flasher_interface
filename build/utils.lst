ARM GAS  /tmp/ccnPUufr.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"utils.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.copyString,"ax",%progbits
  16              		.align	1
  17              		.global	copyString
  18              		.arch armv7-m
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu softvfp
  24              	copyString:
  25              	.LVL0:
  26              	.LFB66:
  27              		.file 1 "Core/Src/utils.c"
   1:Core/Src/utils.c **** /**
   2:Core/Src/utils.c ****  * @file utils.c
   3:Core/Src/utils.c ****  * @author Daniel Adamkovic
   4:Core/Src/utils.c ****  * @brief 
   5:Core/Src/utils.c ****  * @version 0.1
   6:Core/Src/utils.c ****  * @date 2023-01-15
   7:Core/Src/utils.c ****  * 
   8:Core/Src/utils.c ****  * @copyright Copyright (c) 2023
   9:Core/Src/utils.c ****  * 
  10:Core/Src/utils.c ****  */
  11:Core/Src/utils.c **** 
  12:Core/Src/utils.c **** #include "utils.h"
  13:Core/Src/utils.c **** 
  14:Core/Src/utils.c **** /**
  15:Core/Src/utils.c ****  * @brief converts float to string with precison of 2 decimal places. Can only convert
  16:Core/Src/utils.c ****  *        numbers that are up to 12 unit points long
  17:Core/Src/utils.c ****  * 
  18:Core/Src/utils.c ****  * @param x float to be converted
  19:Core/Src/utils.c ****  * @param p pointer to array where the converted float is to be strored
  20:Core/Src/utils.c ****  */
  21:Core/Src/utils.c **** char *floatToChar(float x, char *p) {
  22:Core/Src/utils.c ****     char temp_storage[16] = {0}; // go to end of buffer
  23:Core/Src/utils.c ****     char *s = (char*) (temp_storage + sizeof(temp_storage) - 1);
  24:Core/Src/utils.c ****     uint16_t decimals;  // variable to store the decimals
  25:Core/Src/utils.c ****     uint16_t units;  // variable to store the units (part to left of decimal place)
  26:Core/Src/utils.c ****     if (x < 0) { // take care of negative numbers
  27:Core/Src/utils.c ****         decimals = (uint32_t)(x * -100) % 100; // make 1000 for 3 decimals etc.
  28:Core/Src/utils.c ****         units = (uint16_t)(-1 * x);
  29:Core/Src/utils.c ****     } else { // positive numbers
  30:Core/Src/utils.c ****         decimals = (uint32_t)(x * 100) % 100;
  31:Core/Src/utils.c ****         units = (uint16_t)x;
ARM GAS  /tmp/ccnPUufr.s 			page 2


  32:Core/Src/utils.c ****     }
  33:Core/Src/utils.c **** 
  34:Core/Src/utils.c ****     *--s = (decimals % 10) + '0';
  35:Core/Src/utils.c ****     decimals /= 10; // repeat for as many decimal places as you need
  36:Core/Src/utils.c ****     *--s = (decimals % 10) + '0';
  37:Core/Src/utils.c ****     *--s = '.';
  38:Core/Src/utils.c **** 
  39:Core/Src/utils.c ****     do  {
  40:Core/Src/utils.c ****         *--s = (units % 10) + '0';
  41:Core/Src/utils.c ****         units /= 10;
  42:Core/Src/utils.c ****     } while(units > 0);
  43:Core/Src/utils.c ****     if (x < 0) *--s = '-'; // unary minus sign for negative numbers
  44:Core/Src/utils.c ****     copyString(p, s);
  45:Core/Src/utils.c ****     return p;
  46:Core/Src/utils.c **** }
  47:Core/Src/utils.c **** 
  48:Core/Src/utils.c **** uint8_t copyString(char *dest, const char *cont){
  28              		.loc 1 48 49 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		.loc 1 48 49 is_stmt 0 view .LVU1
  33 0000 38B5     		push	{r3, r4, r5, lr}
  34              		.cfi_def_cfa_offset 16
  35              		.cfi_offset 3, -16
  36              		.cfi_offset 4, -12
  37              		.cfi_offset 5, -8
  38              		.cfi_offset 14, -4
  39 0002 0546     		mov	r5, r0
  40 0004 0C46     		mov	r4, r1
  49:Core/Src/utils.c ****     uint8_t cont_size = strlen(cont)+1;
  41              		.loc 1 49 5 is_stmt 1 view .LVU2
  42              		.loc 1 49 25 is_stmt 0 view .LVU3
  43 0006 0846     		mov	r0, r1
  44              	.LVL1:
  45              		.loc 1 49 25 view .LVU4
  46 0008 FFF7FEFF 		bl	strlen
  47              	.LVL2:
  48              		.loc 1 49 37 view .LVU5
  49 000c C2B2     		uxtb	r2, r0
  50              		.loc 1 49 13 view .LVU6
  51 000e 0132     		adds	r2, r2, #1
  52              	.LVL3:
  50:Core/Src/utils.c ****     strncpy(dest,cont,cont_size);
  53              		.loc 1 50 5 is_stmt 1 view .LVU7
  54 0010 D2B2     		uxtb	r2, r2
  55              		.loc 1 50 5 is_stmt 0 view .LVU8
  56 0012 2146     		mov	r1, r4
  57 0014 2846     		mov	r0, r5
  58 0016 FFF7FEFF 		bl	strncpy
  59              	.LVL4:
  51:Core/Src/utils.c ****     
  52:Core/Src/utils.c ****     return RETURN_OK;
  60              		.loc 1 52 5 is_stmt 1 view .LVU9
  53:Core/Src/utils.c **** }
  61              		.loc 1 53 1 is_stmt 0 view .LVU10
  62 001a 0020     		movs	r0, #0
ARM GAS  /tmp/ccnPUufr.s 			page 3


  63 001c 38BD     		pop	{r3, r4, r5, pc}
  64              		.loc 1 53 1 view .LVU11
  65              		.cfi_endproc
  66              	.LFE66:
  68              		.global	__aeabi_fcmplt
  69              		.global	__aeabi_fmul
  70              		.global	__aeabi_f2uiz
  71              		.section	.text.floatToChar,"ax",%progbits
  72              		.align	1
  73              		.global	floatToChar
  74              		.syntax unified
  75              		.thumb
  76              		.thumb_func
  77              		.fpu softvfp
  79              	floatToChar:
  80              	.LVL5:
  81              	.LFB65:
  21:Core/Src/utils.c ****     char temp_storage[16] = {0}; // go to end of buffer
  82              		.loc 1 21 37 is_stmt 1 view -0
  83              		.cfi_startproc
  84              		@ args = 0, pretend = 0, frame = 16
  85              		@ frame_needed = 0, uses_anonymous_args = 0
  21:Core/Src/utils.c ****     char temp_storage[16] = {0}; // go to end of buffer
  86              		.loc 1 21 37 is_stmt 0 view .LVU13
  87 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  88              		.cfi_def_cfa_offset 20
  89              		.cfi_offset 4, -20
  90              		.cfi_offset 5, -16
  91              		.cfi_offset 6, -12
  92              		.cfi_offset 7, -8
  93              		.cfi_offset 14, -4
  94 0002 85B0     		sub	sp, sp, #20
  95              		.cfi_def_cfa_offset 40
  96 0004 0646     		mov	r6, r0
  97 0006 0F46     		mov	r7, r1
  22:Core/Src/utils.c ****     char *s = (char*) (temp_storage + sizeof(temp_storage) - 1);
  98              		.loc 1 22 5 is_stmt 1 view .LVU14
  22:Core/Src/utils.c ****     char *s = (char*) (temp_storage + sizeof(temp_storage) - 1);
  99              		.loc 1 22 10 is_stmt 0 view .LVU15
 100 0008 0023     		movs	r3, #0
 101 000a 0093     		str	r3, [sp]
 102 000c 0193     		str	r3, [sp, #4]
 103 000e 0293     		str	r3, [sp, #8]
 104 0010 0393     		str	r3, [sp, #12]
  23:Core/Src/utils.c ****     uint16_t decimals;  // variable to store the decimals
 105              		.loc 1 23 5 is_stmt 1 view .LVU16
 106              	.LVL6:
  24:Core/Src/utils.c ****     uint16_t units;  // variable to store the units (part to left of decimal place)
 107              		.loc 1 24 5 view .LVU17
  25:Core/Src/utils.c ****     if (x < 0) { // take care of negative numbers
 108              		.loc 1 25 5 view .LVU18
  26:Core/Src/utils.c ****         decimals = (uint32_t)(x * -100) % 100; // make 1000 for 3 decimals etc.
 109              		.loc 1 26 5 view .LVU19
  26:Core/Src/utils.c ****         decimals = (uint32_t)(x * -100) % 100; // make 1000 for 3 decimals etc.
 110              		.loc 1 26 8 is_stmt 0 view .LVU20
 111 0012 0021     		movs	r1, #0
 112              	.LVL7:
ARM GAS  /tmp/ccnPUufr.s 			page 4


  26:Core/Src/utils.c ****         decimals = (uint32_t)(x * -100) % 100; // make 1000 for 3 decimals etc.
 113              		.loc 1 26 8 view .LVU21
 114 0014 FFF7FEFF 		bl	__aeabi_fcmplt
 115              	.LVL8:
  26:Core/Src/utils.c ****         decimals = (uint32_t)(x * -100) % 100; // make 1000 for 3 decimals etc.
 116              		.loc 1 26 8 view .LVU22
 117 0018 0028     		cmp	r0, #0
 118 001a 47D1     		bne	.L14
  30:Core/Src/utils.c ****         units = (uint16_t)x;
 119              		.loc 1 30 9 is_stmt 1 view .LVU23
  30:Core/Src/utils.c ****         units = (uint16_t)x;
 120              		.loc 1 30 33 is_stmt 0 view .LVU24
 121 001c 3049     		ldr	r1, .L16
 122 001e 3046     		mov	r0, r6
 123 0020 FFF7FEFF 		bl	__aeabi_fmul
 124              	.LVL9:
  30:Core/Src/utils.c ****         units = (uint16_t)x;
 125              		.loc 1 30 20 view .LVU25
 126 0024 FFF7FEFF 		bl	__aeabi_f2uiz
 127              	.LVL10:
  30:Core/Src/utils.c ****         units = (uint16_t)x;
 128              		.loc 1 30 40 view .LVU26
 129 0028 2E4C     		ldr	r4, .L16+4
 130 002a A4FB0034 		umull	r3, r4, r4, r0
 131 002e 6409     		lsrs	r4, r4, #5
 132 0030 6423     		movs	r3, #100
 133 0032 03FB1404 		mls	r4, r3, r4, r0
  30:Core/Src/utils.c ****         units = (uint16_t)x;
 134              		.loc 1 30 18 view .LVU27
 135 0036 A4B2     		uxth	r4, r4
 136              	.LVL11:
  31:Core/Src/utils.c ****     }
 137              		.loc 1 31 9 is_stmt 1 view .LVU28
  31:Core/Src/utils.c ****     }
 138              		.loc 1 31 15 is_stmt 0 view .LVU29
 139 0038 3046     		mov	r0, r6
 140 003a FFF7FEFF 		bl	__aeabi_f2uiz
 141              	.LVL12:
 142 003e 80B2     		uxth	r0, r0
 143              	.LVL13:
 144              	.L6:
  34:Core/Src/utils.c ****     decimals /= 10; // repeat for as many decimal places as you need
 145              		.loc 1 34 5 is_stmt 1 view .LVU30
  34:Core/Src/utils.c ****     decimals /= 10; // repeat for as many decimal places as you need
 146              		.loc 1 34 28 is_stmt 0 view .LVU31
 147 0040 294A     		ldr	r2, .L16+8
 148 0042 A2FB0413 		umull	r1, r3, r2, r4
 149 0046 DB08     		lsrs	r3, r3, #3
 150 0048 03EB8301 		add	r1, r3, r3, lsl #2
 151 004c A4EB4104 		sub	r4, r4, r1, lsl #1
 152              	.LVL14:
  34:Core/Src/utils.c ****     decimals /= 10; // repeat for as many decimal places as you need
 153              		.loc 1 34 28 view .LVU32
 154 0050 3034     		adds	r4, r4, #48
  34:Core/Src/utils.c ****     decimals /= 10; // repeat for as many decimal places as you need
 155              		.loc 1 34 10 view .LVU33
 156 0052 8DF80E40 		strb	r4, [sp, #14]
ARM GAS  /tmp/ccnPUufr.s 			page 5


  35:Core/Src/utils.c ****     *--s = (decimals % 10) + '0';
 157              		.loc 1 35 5 is_stmt 1 view .LVU34
  35:Core/Src/utils.c ****     *--s = (decimals % 10) + '0';
 158              		.loc 1 35 14 is_stmt 0 view .LVU35
 159 0056 9BB2     		uxth	r3, r3
 160              	.LVL15:
  36:Core/Src/utils.c ****     *--s = '.';
 161              		.loc 1 36 5 is_stmt 1 view .LVU36
  36:Core/Src/utils.c ****     *--s = '.';
 162              		.loc 1 36 28 is_stmt 0 view .LVU37
 163 0058 A2FB0312 		umull	r1, r2, r2, r3
 164 005c D208     		lsrs	r2, r2, #3
 165 005e 02EB8202 		add	r2, r2, r2, lsl #2
 166 0062 A3EB4203 		sub	r3, r3, r2, lsl #1
 167              	.LVL16:
  36:Core/Src/utils.c ****     *--s = '.';
 168              		.loc 1 36 28 view .LVU38
 169 0066 3033     		adds	r3, r3, #48
  36:Core/Src/utils.c ****     *--s = '.';
 170              		.loc 1 36 10 view .LVU39
 171 0068 8DF80D30 		strb	r3, [sp, #13]
  37:Core/Src/utils.c **** 
 172              		.loc 1 37 5 is_stmt 1 view .LVU40
 173              	.LVL17:
  37:Core/Src/utils.c **** 
 174              		.loc 1 37 10 is_stmt 0 view .LVU41
 175 006c 2E23     		movs	r3, #46
 176 006e 8DF80C30 		strb	r3, [sp, #12]
 177 0072 03AC     		add	r4, sp, #12
 178              	.LVL18:
 179              	.L7:
  39:Core/Src/utils.c ****         *--s = (units % 10) + '0';
 180              		.loc 1 39 5 is_stmt 1 discriminator 1 view .LVU42
  40:Core/Src/utils.c ****         units /= 10;
 181              		.loc 1 40 9 discriminator 1 view .LVU43
 182 0074 2546     		mov	r5, r4
 183              	.LVL19:
  40:Core/Src/utils.c ****         units /= 10;
 184              		.loc 1 40 29 is_stmt 0 discriminator 1 view .LVU44
 185 0076 1C4B     		ldr	r3, .L16+8
 186 0078 A3FB0023 		umull	r2, r3, r3, r0
 187 007c DB08     		lsrs	r3, r3, #3
 188 007e 03EB8302 		add	r2, r3, r3, lsl #2
 189 0082 A0EB4202 		sub	r2, r0, r2, lsl #1
 190 0086 3032     		adds	r2, r2, #48
  40:Core/Src/utils.c ****         units /= 10;
 191              		.loc 1 40 14 discriminator 1 view .LVU45
 192 0088 04F8012D 		strb	r2, [r4, #-1]!
 193              	.LVL20:
  41:Core/Src/utils.c ****     } while(units > 0);
 194              		.loc 1 41 9 is_stmt 1 discriminator 1 view .LVU46
 195 008c 0246     		mov	r2, r0
  41:Core/Src/utils.c ****     } while(units > 0);
 196              		.loc 1 41 15 is_stmt 0 discriminator 1 view .LVU47
 197 008e 98B2     		uxth	r0, r3
 198              	.LVL21:
  42:Core/Src/utils.c ****     if (x < 0) *--s = '-'; // unary minus sign for negative numbers
ARM GAS  /tmp/ccnPUufr.s 			page 6


 199              		.loc 1 42 12 is_stmt 1 discriminator 1 view .LVU48
  42:Core/Src/utils.c ****     if (x < 0) *--s = '-'; // unary minus sign for negative numbers
 200              		.loc 1 42 5 is_stmt 0 discriminator 1 view .LVU49
 201 0090 092A     		cmp	r2, #9
 202 0092 EFD8     		bhi	.L7
  43:Core/Src/utils.c ****     copyString(p, s);
 203              		.loc 1 43 5 is_stmt 1 view .LVU50
  43:Core/Src/utils.c ****     copyString(p, s);
 204              		.loc 1 43 8 is_stmt 0 view .LVU51
 205 0094 0021     		movs	r1, #0
 206 0096 3046     		mov	r0, r6
 207              	.LVL22:
  43:Core/Src/utils.c ****     copyString(p, s);
 208              		.loc 1 43 8 view .LVU52
 209 0098 FFF7FEFF 		bl	__aeabi_fcmplt
 210              	.LVL23:
  43:Core/Src/utils.c ****     copyString(p, s);
 211              		.loc 1 43 8 view .LVU53
 212 009c D0B9     		cbnz	r0, .L15
 213              	.L8:
  44:Core/Src/utils.c ****     return p;
 214              		.loc 1 44 5 is_stmt 1 view .LVU54
 215 009e 2146     		mov	r1, r4
 216 00a0 3846     		mov	r0, r7
 217 00a2 FFF7FEFF 		bl	copyString
 218              	.LVL24:
  45:Core/Src/utils.c **** }
 219              		.loc 1 45 5 view .LVU55
  46:Core/Src/utils.c **** 
 220              		.loc 1 46 1 is_stmt 0 view .LVU56
 221 00a6 3846     		mov	r0, r7
 222 00a8 05B0     		add	sp, sp, #20
 223              		.cfi_remember_state
 224              		.cfi_def_cfa_offset 20
 225              		@ sp needed
 226 00aa F0BD     		pop	{r4, r5, r6, r7, pc}
 227              	.LVL25:
 228              	.L14:
 229              		.cfi_restore_state
  27:Core/Src/utils.c ****         units = (uint16_t)(-1 * x);
 230              		.loc 1 27 9 is_stmt 1 view .LVU57
  27:Core/Src/utils.c ****         units = (uint16_t)(-1 * x);
 231              		.loc 1 27 33 is_stmt 0 view .LVU58
 232 00ac 0F49     		ldr	r1, .L16+12
 233 00ae 3046     		mov	r0, r6
 234 00b0 FFF7FEFF 		bl	__aeabi_fmul
 235              	.LVL26:
  27:Core/Src/utils.c ****         units = (uint16_t)(-1 * x);
 236              		.loc 1 27 20 view .LVU59
 237 00b4 FFF7FEFF 		bl	__aeabi_f2uiz
 238              	.LVL27:
  27:Core/Src/utils.c ****         units = (uint16_t)(-1 * x);
 239              		.loc 1 27 41 view .LVU60
 240 00b8 0A4C     		ldr	r4, .L16+4
 241 00ba A4FB0034 		umull	r3, r4, r4, r0
 242 00be 6409     		lsrs	r4, r4, #5
 243 00c0 6423     		movs	r3, #100
ARM GAS  /tmp/ccnPUufr.s 			page 7


 244 00c2 03FB1404 		mls	r4, r3, r4, r0
  27:Core/Src/utils.c ****         units = (uint16_t)(-1 * x);
 245              		.loc 1 27 18 view .LVU61
 246 00c6 A4B2     		uxth	r4, r4
 247              	.LVL28:
  28:Core/Src/utils.c ****     } else { // positive numbers
 248              		.loc 1 28 9 is_stmt 1 view .LVU62
  28:Core/Src/utils.c ****     } else { // positive numbers
 249              		.loc 1 28 31 is_stmt 0 view .LVU63
 250 00c8 06F10040 		add	r0, r6, #-2147483648
  28:Core/Src/utils.c ****     } else { // positive numbers
 251              		.loc 1 28 15 view .LVU64
 252 00cc FFF7FEFF 		bl	__aeabi_f2uiz
 253              	.LVL29:
 254 00d0 80B2     		uxth	r0, r0
 255              	.LVL30:
  28:Core/Src/utils.c ****     } else { // positive numbers
 256              		.loc 1 28 15 view .LVU65
 257 00d2 B5E7     		b	.L6
 258              	.LVL31:
 259              	.L15:
  43:Core/Src/utils.c ****     copyString(p, s);
 260              		.loc 1 43 16 is_stmt 1 discriminator 1 view .LVU66
  43:Core/Src/utils.c ****     copyString(p, s);
 261              		.loc 1 43 21 is_stmt 0 discriminator 1 view .LVU67
 262 00d4 2D23     		movs	r3, #45
 263 00d6 04F8013C 		strb	r3, [r4, #-1]
 264 00da AC1E     		subs	r4, r5, #2
 265              	.LVL32:
  43:Core/Src/utils.c ****     copyString(p, s);
 266              		.loc 1 43 21 discriminator 1 view .LVU68
 267 00dc DFE7     		b	.L8
 268              	.L17:
 269 00de 00BF     		.align	2
 270              	.L16:
 271 00e0 0000C842 		.word	1120403456
 272 00e4 1F85EB51 		.word	1374389535
 273 00e8 CDCCCCCC 		.word	-858993459
 274 00ec 0000C8C2 		.word	-1027080192
 275              		.cfi_endproc
 276              	.LFE65:
 278              		.section	.text.uartSendData,"ax",%progbits
 279              		.align	1
 280              		.global	uartSendData
 281              		.syntax unified
 282              		.thumb
 283              		.thumb_func
 284              		.fpu softvfp
 286              	uartSendData:
 287              	.LVL33:
 288              	.LFB67:
  54:Core/Src/utils.c **** 
  55:Core/Src/utils.c **** 
  56:Core/Src/utils.c **** uint8_t uartSendData(UART_HandleTypeDef *uart_h, char *data){
 289              		.loc 1 56 61 is_stmt 1 view -0
 290              		.cfi_startproc
 291              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccnPUufr.s 			page 8


 292              		@ frame_needed = 0, uses_anonymous_args = 0
 293              		.loc 1 56 61 is_stmt 0 view .LVU70
 294 0000 70B5     		push	{r4, r5, r6, lr}
 295              		.cfi_def_cfa_offset 16
 296              		.cfi_offset 4, -16
 297              		.cfi_offset 5, -12
 298              		.cfi_offset 6, -8
 299              		.cfi_offset 14, -4
 300 0002 0646     		mov	r6, r0
 301 0004 0D46     		mov	r5, r1
  57:Core/Src/utils.c **** 
  58:Core/Src/utils.c ****   uint16_t data_len = strlen(data) + 1; //adding one for \0
 302              		.loc 1 58 3 is_stmt 1 view .LVU71
 303              		.loc 1 58 23 is_stmt 0 view .LVU72
 304 0006 0846     		mov	r0, r1
 305              	.LVL34:
 306              		.loc 1 58 23 view .LVU73
 307 0008 FFF7FEFF 		bl	strlen
 308              	.LVL35:
 309              		.loc 1 58 36 view .LVU74
 310 000c 84B2     		uxth	r4, r0
 311              		.loc 1 58 12 view .LVU75
 312 000e 0134     		adds	r4, r4, #1
 313 0010 A4B2     		uxth	r4, r4
 314              	.LVL36:
  59:Core/Src/utils.c **** 
  60:Core/Src/utils.c ****   if(HAL_OK != HAL_UART_Transmit(uart_h, data, data_len, 100)){
 315              		.loc 1 60 3 is_stmt 1 view .LVU76
 316              		.loc 1 60 16 is_stmt 0 view .LVU77
 317 0012 6423     		movs	r3, #100
 318 0014 2246     		mov	r2, r4
 319 0016 2946     		mov	r1, r5
 320 0018 3046     		mov	r0, r6
 321 001a FFF7FEFF 		bl	HAL_UART_Transmit
 322              	.LVL37:
 323              		.loc 1 60 5 view .LVU78
 324 001e 10B1     		cbz	r0, .L22
  61:Core/Src/utils.c ****     return RETURN_FAIL;
 325              		.loc 1 61 12 view .LVU79
 326 0020 0126     		movs	r6, #1
 327              	.LVL38:
 328              	.L19:
  62:Core/Src/utils.c ****   };
  63:Core/Src/utils.c **** 
  64:Core/Src/utils.c ****   //clear the buffer for the next use
  65:Core/Src/utils.c ****   memset(data, 0, data_len);
  66:Core/Src/utils.c **** 
  67:Core/Src/utils.c ****   return RETURN_OK;
  68:Core/Src/utils.c **** }
 329              		.loc 1 68 1 view .LVU80
 330 0022 3046     		mov	r0, r6
 331 0024 70BD     		pop	{r4, r5, r6, pc}
 332              	.LVL39:
 333              	.L22:
 334              		.loc 1 68 1 view .LVU81
 335 0026 0646     		mov	r6, r0
 336              	.LVL40:
ARM GAS  /tmp/ccnPUufr.s 			page 9


  62:Core/Src/utils.c ****   };
 337              		.loc 1 62 4 is_stmt 1 view .LVU82
  65:Core/Src/utils.c **** 
 338              		.loc 1 65 3 view .LVU83
 339 0028 2246     		mov	r2, r4
 340 002a 0021     		movs	r1, #0
 341 002c 2846     		mov	r0, r5
 342 002e FFF7FEFF 		bl	memset
 343              	.LVL41:
  67:Core/Src/utils.c **** }
 344              		.loc 1 67 3 view .LVU84
  67:Core/Src/utils.c **** }
 345              		.loc 1 67 10 is_stmt 0 view .LVU85
 346 0032 F6E7     		b	.L19
 347              		.cfi_endproc
 348              	.LFE67:
 350              		.section	.text.uartGetData,"ax",%progbits
 351              		.align	1
 352              		.global	uartGetData
 353              		.syntax unified
 354              		.thumb
 355              		.thumb_func
 356              		.fpu softvfp
 358              	uartGetData:
 359              	.LVL42:
 360              	.LFB68:
  69:Core/Src/utils.c **** 
  70:Core/Src/utils.c **** uint8_t uartGetData(UART_HandleTypeDef *uart_h, char *data){
 361              		.loc 1 70 60 is_stmt 1 view -0
 362              		.cfi_startproc
 363              		@ args = 0, pretend = 0, frame = 8
 364              		@ frame_needed = 0, uses_anonymous_args = 0
 365              		.loc 1 70 60 is_stmt 0 view .LVU87
 366 0000 30B5     		push	{r4, r5, lr}
 367              		.cfi_def_cfa_offset 12
 368              		.cfi_offset 4, -12
 369              		.cfi_offset 5, -8
 370              		.cfi_offset 14, -4
 371 0002 83B0     		sub	sp, sp, #12
 372              		.cfi_def_cfa_offset 24
 373 0004 0546     		mov	r5, r0
 374 0006 0C46     		mov	r4, r1
  71:Core/Src/utils.c **** 
  72:Core/Src/utils.c ****   uint16_t max_len = sizeof(data);
 375              		.loc 1 72 3 is_stmt 1 view .LVU88
 376              	.LVL43:
  73:Core/Src/utils.c ****   uint16_t curr_byte = 0;
 377              		.loc 1 73 3 view .LVU89
  74:Core/Src/utils.c ****   char tmp = '\0';
 378              		.loc 1 74 3 view .LVU90
 379              		.loc 1 74 8 is_stmt 0 view .LVU91
 380 0008 0023     		movs	r3, #0
 381 000a 8DF80730 		strb	r3, [sp, #7]
  75:Core/Src/utils.c ****   
  76:Core/Src/utils.c ****   //clear the buffer before reception
  77:Core/Src/utils.c ****   memset(data, 0, max_len);
 382              		.loc 1 77 3 is_stmt 1 view .LVU92
ARM GAS  /tmp/ccnPUufr.s 			page 10


 383 000e 0B60     		str	r3, [r1]	@ unaligned
  78:Core/Src/utils.c **** 
  79:Core/Src/utils.c ****   while(curr_byte < max_len){
 384              		.loc 1 79 3 view .LVU93
 385              		.loc 1 79 8 is_stmt 0 view .LVU94
 386 0010 00E0     		b	.L24
 387              	.LVL44:
 388              	.L29:
  80:Core/Src/utils.c ****     if(HAL_OK != HAL_UART_Receive(uart_h, &tmp, 1, 100)){
  81:Core/Src/utils.c ****         return RETURN_FAIL;
  82:Core/Src/utils.c ****     }
  83:Core/Src/utils.c **** 
  84:Core/Src/utils.c ****     if(tmp == '\n')break;
  85:Core/Src/utils.c ****     else{
  86:Core/Src/utils.c ****         *(data+curr_byte) = tmp; 
 389              		.loc 1 86 9 is_stmt 1 view .LVU95
 390              		.loc 1 86 27 is_stmt 0 view .LVU96
 391 0012 2370     		strb	r3, [r4]
 392              	.L24:
  79:Core/Src/utils.c ****     if(HAL_OK != HAL_UART_Receive(uart_h, &tmp, 1, 100)){
 393              		.loc 1 79 8 is_stmt 1 view .LVU97
  80:Core/Src/utils.c ****     if(HAL_OK != HAL_UART_Receive(uart_h, &tmp, 1, 100)){
 394              		.loc 1 80 5 view .LVU98
  80:Core/Src/utils.c ****     if(HAL_OK != HAL_UART_Receive(uart_h, &tmp, 1, 100)){
 395              		.loc 1 80 18 is_stmt 0 view .LVU99
 396 0014 6423     		movs	r3, #100
 397 0016 0122     		movs	r2, #1
 398 0018 0DF10701 		add	r1, sp, #7
 399 001c 2846     		mov	r0, r5
 400 001e FFF7FEFF 		bl	HAL_UART_Receive
 401              	.LVL45:
  80:Core/Src/utils.c ****     if(HAL_OK != HAL_UART_Receive(uart_h, &tmp, 1, 100)){
 402              		.loc 1 80 7 view .LVU100
 403 0022 0246     		mov	r2, r0
 404 0024 20B9     		cbnz	r0, .L28
  84:Core/Src/utils.c ****     else{
 405              		.loc 1 84 5 is_stmt 1 view .LVU101
  84:Core/Src/utils.c ****     else{
 406              		.loc 1 84 12 is_stmt 0 view .LVU102
 407 0026 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
  84:Core/Src/utils.c ****     else{
 408              		.loc 1 84 7 view .LVU103
 409 002a 0A2B     		cmp	r3, #10
 410 002c F1D1     		bne	.L29
 411 002e 00E0     		b	.L25
 412              	.L28:
  81:Core/Src/utils.c ****     }
 413              		.loc 1 81 16 view .LVU104
 414 0030 0122     		movs	r2, #1
 415              	.L25:
  87:Core/Src/utils.c ****     }
  88:Core/Src/utils.c ****     }
  89:Core/Src/utils.c ****     return RETURN_OK;
  90:Core/Src/utils.c ****   }
 416              		.loc 1 90 3 view .LVU105
 417 0032 1046     		mov	r0, r2
 418 0034 03B0     		add	sp, sp, #12
ARM GAS  /tmp/ccnPUufr.s 			page 11


 419              		.cfi_def_cfa_offset 12
 420              		@ sp needed
 421 0036 30BD     		pop	{r4, r5, pc}
 422              		.loc 1 90 3 view .LVU106
 423              		.cfi_endproc
 424              	.LFE68:
 426              		.text
 427              	.Letext0:
 428              		.file 2 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stdint.h"
 429              		.file 3 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 430              		.file 4 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 431              		.file 5 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 432              		.file 6 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 433              		.file 7 "/usr/include/newlib/string.h"
 434              		.file 8 "<built-in>"
ARM GAS  /tmp/ccnPUufr.s 			page 12


DEFINED SYMBOLS
                            *ABS*:0000000000000000 utils.c
     /tmp/ccnPUufr.s:16     .text.copyString:0000000000000000 $t
     /tmp/ccnPUufr.s:24     .text.copyString:0000000000000000 copyString
     /tmp/ccnPUufr.s:72     .text.floatToChar:0000000000000000 $t
     /tmp/ccnPUufr.s:79     .text.floatToChar:0000000000000000 floatToChar
     /tmp/ccnPUufr.s:271    .text.floatToChar:00000000000000e0 $d
     /tmp/ccnPUufr.s:279    .text.uartSendData:0000000000000000 $t
     /tmp/ccnPUufr.s:286    .text.uartSendData:0000000000000000 uartSendData
     /tmp/ccnPUufr.s:351    .text.uartGetData:0000000000000000 $t
     /tmp/ccnPUufr.s:358    .text.uartGetData:0000000000000000 uartGetData

UNDEFINED SYMBOLS
strlen
strncpy
__aeabi_fcmplt
__aeabi_fmul
__aeabi_f2uiz
HAL_UART_Transmit
memset
HAL_UART_Receive
